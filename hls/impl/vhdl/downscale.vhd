-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity downscale is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    dest_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    dest_ce0 : OUT STD_LOGIC;
    dest_we0 : OUT STD_LOGIC;
    dest_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of downscale is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_A00000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000101000000000000000000000";
    constant ap_const_lv32_780000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011110000000000000000000";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_ratio_fu_145_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal x_ratio_reg_342 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal y_ratio_fu_155_p2 : STD_LOGIC_VECTOR (23 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of y_ratio_fu_155_p2 : signal is "no";
    signal y_ratio_reg_347 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_193_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_reg_352 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal row_1_fu_205_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_1_reg_360 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_249_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal dest_addr_reg_375 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal col_1_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_1_reg_383 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_388 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_295_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal next_mul_reg_392 : STD_LOGIC_VECTOR (24 downto 0);
    signal row_reg_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_reg_107 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal phi_mul_reg_118 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_cast_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_7_fu_141_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_151_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_169_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_10_fu_181_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_189_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_177_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal row_cast3_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_324_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_216_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_225_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_237_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_cast_fu_233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_cast1_cast_fu_259_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_263_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_cast1_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_300_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_cast_cast_fu_310_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_324_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_129_ap_start : STD_LOGIC;
    signal grp_fu_129_ap_done : STD_LOGIC;
    signal grp_fu_135_ap_start : STD_LOGIC;
    signal grp_fu_135_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_324_p10 : STD_LOGIC_VECTOR (23 downto 0);

    component detect_face_udiv_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component detect_face_udiv_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component detect_face_mul_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    detect_face_udiv_bkb_U0 : component detect_face_udiv_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 32,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_129_ap_start,
        done => grp_fu_129_ap_done,
        din0 => grp_fu_129_p0,
        din1 => width,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p2);

    detect_face_udiv_cud_U1 : component detect_face_udiv_cud
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 32,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_135_ap_start,
        done => grp_fu_135_ap_done,
        din0 => grp_fu_135_p0,
        din1 => height,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    detect_face_mul_mdEe_U2 : component detect_face_mul_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 7,
        dout_WIDTH => 24)
    port map (
        din0 => y_ratio_reg_347,
        din1 => tmp_3_fu_324_p1,
        dout => tmp_3_fu_324_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_1_fu_199_p2 = ap_const_lv1_0))) then 
                col_reg_107 <= ap_const_lv8_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
                col_reg_107 <= col_1_reg_383;
            end if; 
        end if;
    end process;

    phi_mul_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_1_fu_199_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_118 <= ap_const_lv25_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
                phi_mul_reg_118 <= next_mul_reg_392;
            end if; 
        end if;
    end process;

    row_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and not((ap_const_lv1_0 = tmp_5_fu_273_p2)))) then 
                row_reg_96 <= row_1_reg_360;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state29))) then 
                row_reg_96 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then
                col_1_reg_383 <= col_1_fu_279_p2;
                dest_addr_reg_375 <= tmp_15_cast_fu_268_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = tmp_5_fu_273_p2))) then
                next_mul_reg_392 <= next_mul_fu_295_p2;
                or_cond_reg_388 <= or_cond_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30))) then
                row_1_reg_360 <= row_1_fu_205_p2;
                    tmp_11_reg_352(14 downto 5) <= tmp_11_fu_193_p2(14 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state30) and (tmp_1_fu_199_p2 = ap_const_lv1_0))) then
                    tmp_14_reg_370(15 downto 5) <= tmp_14_fu_249_p2(15 downto 5);
                tmp_2_reg_365 <= tmp_2_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state29))) then
                x_ratio_reg_342 <= x_ratio_fu_145_p2;
                y_ratio_reg_347 <= y_ratio_fu_155_p2;
            end if;
        end if;
    end process;
    tmp_11_reg_352(4 downto 0) <= "00000";
    tmp_14_reg_370(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_1_fu_199_p2, tmp_5_fu_273_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (not((tmp_1_fu_199_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_273_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29 downto 29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, tmp_1_fu_199_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state30) and not((tmp_1_fu_199_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, tmp_1_fu_199_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state30) and not((tmp_1_fu_199_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_279_p2 <= std_logic_vector(unsigned(col_reg_107) + unsigned(ap_const_lv8_1));
    col_cast1_cast_fu_259_p1 <= std_logic_vector(resize(unsigned(col_reg_107),15));
    col_cast1_fu_255_p1 <= std_logic_vector(resize(unsigned(col_reg_107),32));
    dest_address0 <= dest_addr_reg_375;

    dest_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            dest_ce0 <= ap_const_logic_1;
        else 
            dest_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_d0 <= src_q0;

    dest_we0_assign_proc : process(or_cond_reg_388, ap_CS_fsm_state32)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state32) and not((ap_const_lv1_0 = or_cond_reg_388))))) then 
            dest_we0 <= ap_const_logic_1;
        else 
            dest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_129_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_129_ap_start <= ap_const_logic_1;
        else 
            grp_fu_129_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_129_p0 <= ap_const_lv32_A00000(25 - 1 downto 0);

    grp_fu_135_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            grp_fu_135_ap_start <= ap_const_logic_1;
        else 
            grp_fu_135_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_135_p0 <= ap_const_lv32_780000(24 - 1 downto 0);
    next_mul_fu_295_p2 <= std_logic_vector(unsigned(phi_mul_reg_118) + unsigned(x_ratio_reg_342));
    or_cond_fu_290_p2 <= (tmp_2_reg_365 and tmp_6_fu_285_p2);
    p_shl1_cast_fu_189_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_181_p3),15));
    p_shl2_cast_fu_233_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_225_p3),16));
    p_shl3_cast_fu_245_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_237_p3),16));
    p_shl_cast_fu_177_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_169_p3),15));
    row_1_fu_205_p2 <= std_logic_vector(unsigned(row_reg_96) + unsigned(ap_const_lv7_1));
    row_cast3_fu_165_p1 <= std_logic_vector(resize(unsigned(row_reg_96),32));
    src_address0 <= tmp_16_cast_fu_319_p1(15 - 1 downto 0);

    src_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state31))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_181_p3 <= (row_reg_96 & ap_const_lv5_0);
    tmp_11_fu_193_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_189_p1) + unsigned(p_shl_cast_fu_177_p1));
    tmp_12_fu_225_p3 <= (tmp_4_fu_216_p4 & ap_const_lv7_0);
    tmp_13_fu_237_p3 <= (tmp_4_fu_216_p4 & ap_const_lv5_0);
    tmp_14_fu_249_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_245_p1) + unsigned(p_shl2_cast_fu_233_p1));
    tmp_15_cast_fu_268_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_263_p2),32));
    tmp_15_fu_263_p2 <= std_logic_vector(unsigned(tmp_11_reg_352) + unsigned(col_cast1_cast_fu_259_p1));
    tmp_16_cast_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_314_p2),32));
    tmp_16_fu_314_p2 <= std_logic_vector(unsigned(tmp_8_cast_cast_fu_310_p1) + unsigned(tmp_14_reg_370));
    tmp_17_fu_300_p4 <= phi_mul_reg_118(24 downto 16);
    tmp_1_fu_199_p2 <= "1" when (row_reg_96 = ap_const_lv7_78) else "0";
    tmp_2_fu_211_p2 <= "1" when (unsigned(row_cast3_fu_165_p1) < unsigned(height)) else "0";
    tmp_3_fu_324_p1 <= tmp_3_fu_324_p10(7 - 1 downto 0);
    tmp_3_fu_324_p10 <= std_logic_vector(resize(unsigned(row_reg_96),24));
    tmp_4_fu_216_p4 <= tmp_3_fu_324_p2(23 downto 16);
    tmp_5_fu_273_p2 <= "1" when (col_reg_107 = ap_const_lv8_A0) else "0";
    tmp_6_fu_285_p2 <= "1" when (unsigned(col_cast1_fu_255_p1) < unsigned(width)) else "0";
    tmp_7_fu_141_p1 <= grp_fu_129_p2(25 - 1 downto 0);
    tmp_8_cast_cast_fu_310_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_300_p4),16));
    tmp_8_fu_151_p1 <= grp_fu_135_p2(24 - 1 downto 0);
    tmp_9_fu_169_p3 <= (row_reg_96 & ap_const_lv7_0);
    x_ratio_fu_145_p2 <= std_logic_vector(unsigned(ap_const_lv25_1) + unsigned(tmp_7_fu_141_p1));
    y_ratio_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv24_1) + unsigned(tmp_8_fu_151_p1));
end behav;
