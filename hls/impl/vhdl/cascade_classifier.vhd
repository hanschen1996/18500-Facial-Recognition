-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cascade_classifier is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    integral_image_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    integral_image_ce0 : OUT STD_LOGIC;
    integral_image_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    integral_image_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    integral_image_ce1 : OUT STD_LOGIC;
    integral_image_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    integral_image_sq_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    integral_image_sq_ce0 : OUT STD_LOGIC;
    integral_image_sq_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    integral_image_sq_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    integral_image_sq_ce1 : OUT STD_LOGIC;
    integral_image_sq_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    alr_found_i : IN STD_LOGIC_VECTOR (31 downto 0);
    alr_found_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    alr_found_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cascade_classifier is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (64 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (64 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (64 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (64 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (64 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (64 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (64 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (64 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (64 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (64 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (64 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal STAGES_feature_count_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal STAGES_feature_count_ce0 : STD_LOGIC;
    signal STAGES_feature_count_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal STAGES_threshold_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal STAGES_threshold_ce0 : STD_LOGIC;
    signal STAGES_threshold_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal FEATURES_rect1_x_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect1_x_ce0 : STD_LOGIC;
    signal FEATURES_rect1_x_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect1_y_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect1_y_ce0 : STD_LOGIC;
    signal FEATURES_rect1_y_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect1_width_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect1_width_ce0 : STD_LOGIC;
    signal FEATURES_rect1_width_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect1_heigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect1_heigh_ce0 : STD_LOGIC;
    signal FEATURES_rect1_heigh_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect1_weigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect1_weigh_ce0 : STD_LOGIC;
    signal FEATURES_rect1_weigh_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal FEATURES_rect2_x_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect2_x_ce0 : STD_LOGIC;
    signal FEATURES_rect2_x_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect2_y_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect2_y_ce0 : STD_LOGIC;
    signal FEATURES_rect2_y_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect2_width_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect2_width_ce0 : STD_LOGIC;
    signal FEATURES_rect2_width_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect2_heigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect2_heigh_ce0 : STD_LOGIC;
    signal FEATURES_rect2_heigh_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect2_weigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect2_weigh_ce0 : STD_LOGIC;
    signal FEATURES_rect2_weigh_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal FEATURES_rect3_x_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect3_x_ce0 : STD_LOGIC;
    signal FEATURES_rect3_x_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect3_y_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect3_y_ce0 : STD_LOGIC;
    signal FEATURES_rect3_y_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal FEATURES_rect3_width_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect3_width_ce0 : STD_LOGIC;
    signal FEATURES_rect3_width_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal FEATURES_rect3_heigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect3_heigh_ce0 : STD_LOGIC;
    signal FEATURES_rect3_heigh_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal FEATURES_rect3_weigh_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_rect3_weigh_ce0 : STD_LOGIC;
    signal FEATURES_rect3_weigh_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal FEATURES_below_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_below_ce0 : STD_LOGIC;
    signal FEATURES_below_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal FEATURES_above_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_above_ce0 : STD_LOGIC;
    signal FEATURES_above_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal FEATURES_threshold_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal FEATURES_threshold_ce0 : STD_LOGIC;
    signal FEATURES_threshold_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal best_accum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2177 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_798_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_reg_2188 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_47_fu_804_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_2194 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_2205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_848_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_reg_2210 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal integral_image_addr_5_reg_2227 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_sq_ad_3_reg_2237 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_51_fu_884_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_reg_2242 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_2252 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_reg_2262 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i_16_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_16_reg_2282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_2287 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_reg_2292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_8_i_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_reg_2298 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_reg_2304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_i_reg_2314 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal loc_V_reg_2319 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal loc_V_4_fu_1004_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_4_reg_2325 : STD_LOGIC_VECTOR (51 downto 0);
    signal result_V_fu_1099_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_reg_2330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_11_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2335 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal s_1_fu_1119_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_1_reg_2339 : STD_LOGIC_VECTOR (4 downto 0);
    signal stage_threshold_cast_fu_1141_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal stage_threshold_cast_reg_2365 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal feature_index_2_fu_1145_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal feature_index_2_reg_2370 : STD_LOGIC_VECTOR (12 downto 0);
    signal feature_index_1_cast_fu_1151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_index_1_cast_reg_2376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal exitcond_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_1161_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_reg_2405 : STD_LOGIC_VECTOR (12 downto 0);
    signal total_stage_accum_1_fu_1176_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_17_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal feature_rect1_y_reg_2423 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_59_fu_1262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_reg_2448 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_1315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_reg_2458 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect2_y_reg_2468 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_reg_2498 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_1409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_reg_2508 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_75_fu_1462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_75_reg_2518 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_i2_fu_1480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i2_reg_2548 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i1_reg_2555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_80_fu_1555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_reg_2565 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_1607_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_reg_2575 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect1_weight_reg_2620 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal feature_rect2_weight_reg_2625 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect3_weight_reg_2630 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_below_reg_2635 : STD_LOGIC_VECTOR (12 downto 0);
    signal feature_above_reg_2640 : STD_LOGIC_VECTOR (12 downto 0);
    signal feature_threshold_reg_2645 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i2_reg_2650 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_fu_1633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal thresh_reg_2655 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal val1_fu_1638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val1_reg_2660 : STD_LOGIC_VECTOR (31 downto 0);
    signal val2_fu_1643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val2_reg_2665 : STD_LOGIC_VECTOR (31 downto 0);
    signal val3_fu_1648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal val3_reg_2670 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_accum_1_fu_1677_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal loc_V_5_reg_2680 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal loc_V_6_fu_1697_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_6_reg_2686 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_V_2_fu_1792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_2_reg_2691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_row_assign_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_col_assign_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal feature_index_reg_622 : STD_LOGIC_VECTOR (12 downto 0);
    signal total_stage_accum_reg_634 : STD_LOGIC_VECTOR (25 downto 0);
    signal s_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal feature_index_1_reg_657 : STD_LOGIC_VECTOR (12 downto 0);
    signal stage_accum_reg_667 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_41_cast_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_cast_fu_914_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_cast_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_cast_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_cast_fu_1257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_cast_fu_1310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_cast_fu_1321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_cast_fu_1325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_cast_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_cast_fu_1457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_cast_fu_1472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_cast_fu_1476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_cast_fu_1550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_cast_fu_1602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_cast_fu_1613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_cast_fu_1617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_stage_accum_ca_fu_1935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_2144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_2154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_687_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_693_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_701_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_774_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_46_fu_786_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_790_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_778_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_i_fu_819_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_824_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_32_fu_836_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_cast_fu_832_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_858_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_862_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_873_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i_fu_899_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i_cast_cast_fu_905_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_909_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_i_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_953_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_55_fu_973_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_fu_978_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_704_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_1008_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_i_cast7_fu_1019_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_1022_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_17_fu_1036_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1028_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_fu_1041_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_fu_1045_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_4_cast_fu_1053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_i_cast_fu_1061_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_i_fu_1015_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_1_i_i_i_fu_1057_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_2_i_i_i_fu_1065_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_62_fu_1077_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_fu_1071_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_38_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_1089_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_feature_count_s_fu_1137_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal stage_accum_cast_cas_fu_1167_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal feature_rect1_x_cast_fu_1182_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i1_fu_1197_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect1_width_s_fu_1189_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i1_19_fu_1206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect1_y_cast_fu_1186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i_fu_1216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_1221_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_56_fu_1233_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl15_cast_fu_1241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl14_cast_fu_1229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_1245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i1_cast_cast_fu_1202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_1251_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i1_cast_cast_20_fu_1212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect1_height_1_fu_1193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i1_fu_1268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_fu_1274_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_61_fu_1286_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl13_cast_fu_1294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl12_cast_fu_1282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_1298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_1304_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect2_x_cast_fu_1329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i2_fu_1344_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect2_width_s_fu_1336_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i2_21_fu_1353_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect2_y_cast_fu_1333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_i1_fu_1363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_1368_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_67_fu_1380_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl11_cast_fu_1388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl10_cast_fu_1376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_fu_1392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i2_cast_cast_fu_1349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_1398_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i2_cast_cast_22_fu_1359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect2_height_1_fu_1340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i2_fu_1415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_1421_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_72_fu_1433_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl9_cast_fu_1441_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl8_cast_fu_1429_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_fu_1445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_fu_1451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect3_y_cast_fu_1468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal feature_rect3_x_cast_fu_1485_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i3_fu_1497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal feature_rect3_width_s_fu_1489_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i3_23_fu_1506_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_fu_1516_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_fu_1527_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_1534_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl6_cast_fu_1523_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_78_fu_1538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i3_cast_cast_fu_1502_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_fu_1544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_i3_cast_cast_24_fu_1512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal feature_rect3_height_1_fu_1493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i3_fu_1561_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_1566_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_fu_1578_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_1586_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_1574_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_1590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_1596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal thresh_fu_1633_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val1_fu_1638_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val2_fu_1643_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal val3_fu_1648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_1653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_val_fu_1657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_below_2_fu_1667_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal feature_below_2_cast_fu_1673_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_11_fu_1683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_1701_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i1_cast5_fu_1712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_fu_1715_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_1729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_2_fu_1721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_1734_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_fu_1738_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_6_cast_fu_1746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_6_cast_cas_fu_1750_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_1708_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_6_i_i_fu_1754_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_7_i_i_fu_1758_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_97_fu_1770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_1764_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_40_fu_1778_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_1782_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (64 downto 0);
    signal val2_fu_1643_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal val3_fu_1648_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_698_p0 : STD_LOGIC_VECTOR (31 downto 0);

    component detect_face_fadd_yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_fmul_zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_uitofAem IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_uitodBew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detect_face_dsqrtCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detect_face_mul_3DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cascade_classifieeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cascade_classifiefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component cascade_classifieg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifieibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiejbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiekbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cascade_classifielbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiemb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiencg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifieocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiepcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cascade_classifieqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiercU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cascade_classifiesc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascade_classifietde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cascade_classifieudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cascade_classifievdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascade_classifiewdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cascade_classifiexdS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    STAGES_feature_count_U : component cascade_classifieeOg
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => STAGES_feature_count_address0,
        ce0 => STAGES_feature_count_ce0,
        q0 => STAGES_feature_count_q0);

    STAGES_threshold_U : component cascade_classifiefYi
    generic map (
        DataWidth => 11,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => STAGES_threshold_address0,
        ce0 => STAGES_threshold_ce0,
        q0 => STAGES_threshold_q0);

    FEATURES_rect1_x_U : component cascade_classifieg8j
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect1_x_address0,
        ce0 => FEATURES_rect1_x_ce0,
        q0 => FEATURES_rect1_x_q0);

    FEATURES_rect1_y_U : component cascade_classifiehbi
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect1_y_address0,
        ce0 => FEATURES_rect1_y_ce0,
        q0 => FEATURES_rect1_y_q0);

    FEATURES_rect1_width_U : component cascade_classifieibs
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect1_width_address0,
        ce0 => FEATURES_rect1_width_ce0,
        q0 => FEATURES_rect1_width_q0);

    FEATURES_rect1_heigh_U : component cascade_classifiejbC
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect1_heigh_address0,
        ce0 => FEATURES_rect1_heigh_ce0,
        q0 => FEATURES_rect1_heigh_q0);

    FEATURES_rect1_weigh_U : component cascade_classifiekbM
    generic map (
        DataWidth => 8,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect1_weigh_address0,
        ce0 => FEATURES_rect1_weigh_ce0,
        q0 => FEATURES_rect1_weigh_q0);

    FEATURES_rect2_x_U : component cascade_classifielbW
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect2_x_address0,
        ce0 => FEATURES_rect2_x_ce0,
        q0 => FEATURES_rect2_x_q0);

    FEATURES_rect2_y_U : component cascade_classifiemb6
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect2_y_address0,
        ce0 => FEATURES_rect2_y_ce0,
        q0 => FEATURES_rect2_y_q0);

    FEATURES_rect2_width_U : component cascade_classifiencg
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect2_width_address0,
        ce0 => FEATURES_rect2_width_ce0,
        q0 => FEATURES_rect2_width_q0);

    FEATURES_rect2_heigh_U : component cascade_classifieocq
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect2_heigh_address0,
        ce0 => FEATURES_rect2_heigh_ce0,
        q0 => FEATURES_rect2_heigh_q0);

    FEATURES_rect2_weigh_U : component cascade_classifiepcA
    generic map (
        DataWidth => 9,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect2_weigh_address0,
        ce0 => FEATURES_rect2_weigh_ce0,
        q0 => FEATURES_rect2_weigh_q0);

    FEATURES_rect3_x_U : component cascade_classifieqcK
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect3_x_address0,
        ce0 => FEATURES_rect3_x_ce0,
        q0 => FEATURES_rect3_x_q0);

    FEATURES_rect3_y_U : component cascade_classifiercU
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect3_y_address0,
        ce0 => FEATURES_rect3_y_ce0,
        q0 => FEATURES_rect3_y_q0);

    FEATURES_rect3_width_U : component cascade_classifiesc4
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect3_width_address0,
        ce0 => FEATURES_rect3_width_ce0,
        q0 => FEATURES_rect3_width_q0);

    FEATURES_rect3_heigh_U : component cascade_classifietde
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect3_heigh_address0,
        ce0 => FEATURES_rect3_heigh_ce0,
        q0 => FEATURES_rect3_heigh_q0);

    FEATURES_rect3_weigh_U : component cascade_classifieudo
    generic map (
        DataWidth => 9,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_rect3_weigh_address0,
        ce0 => FEATURES_rect3_weigh_ce0,
        q0 => FEATURES_rect3_weigh_q0);

    FEATURES_below_U : component cascade_classifievdy
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_below_address0,
        ce0 => FEATURES_below_ce0,
        q0 => FEATURES_below_q0);

    FEATURES_above_U : component cascade_classifiewdI
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_above_address0,
        ce0 => FEATURES_above_ce0,
        q0 => FEATURES_above_q0);

    FEATURES_threshold_U : component cascade_classifiexdS
    generic map (
        DataWidth => 8,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FEATURES_threshold_address0,
        ce0 => FEATURES_threshold_ce0,
        q0 => FEATURES_threshold_q0);

    detect_face_fmul_zec_U9 : component detect_face_fmul_zec
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_687_p0,
        din1 => grp_fu_687_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p2);

    detect_face_uitofAem_U10 : component detect_face_uitofAem
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_693_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_693_p1);

    detect_face_uitodBew_U12 : component detect_face_uitodBew
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_701_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_701_p1);

    detect_face_dsqrtCeG_U13 : component detect_face_dsqrtCeG
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => tmp_12_i_reg_2314,
        ce => ap_const_logic_1,
        dout => grp_fu_704_p2);

    detect_face_mul_3DeQ_U14 : component detect_face_mul_3DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_reg_2292,
        din1 => mean_reg_2292,
        ce => ap_const_logic_1,
        dout => grp_fu_964_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    feature_index_1_reg_657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
                feature_index_1_reg_657 <= tmp_19_reg_2405;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
                feature_index_1_reg_657 <= feature_index_reg_622;
            end if; 
        end if;
    end process;

    feature_index_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and not((ap_const_lv1_0 = exitcond_fu_1156_p2)) and (ap_const_lv1_0 = tmp_17_fu_1171_p2))) then 
                feature_index_reg_622 <= feature_index_2_reg_2370;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                feature_index_reg_622 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    s_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and not((ap_const_lv1_0 = exitcond_fu_1156_p2)) and (ap_const_lv1_0 = tmp_17_fu_1171_p2))) then 
                s_reg_646 <= s_1_reg_2339;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                s_reg_646 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    stage_accum_reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
                stage_accum_reg_667 <= stage_accum_1_fu_1677_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
                stage_accum_reg_667 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    start_col_assign_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                start_col_assign_reg_610 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state65))) then 
                start_col_assign_reg_610 <= col_reg_2252;
            end if; 
        end if;
    end process;

    start_row_assign_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((exitcond3_fu_888_p2 = ap_const_lv1_0)))) then 
                start_row_assign_reg_598 <= row_reg_2205;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
                start_row_assign_reg_598 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    total_stage_accum_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and not((ap_const_lv1_0 = exitcond_fu_1156_p2)) and (ap_const_lv1_0 = tmp_17_fu_1171_p2))) then 
                total_stage_accum_reg_634 <= total_stage_accum_1_fu_1176_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                total_stage_accum_reg_634 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = tmp_11_reg_2335) and (ap_const_lv1_0 = tmp_15_fu_2144_p2) and not((ap_const_lv1_0 = tmp_16_fu_2154_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = tmp_11_reg_2335) and not((ap_const_lv1_0 = tmp_15_fu_2144_p2))))) then
                best_accum <= total_stage_accum_ca_fu_1935_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                col_reg_2252 <= col_fu_893_p2;
                integral_image_addr_5_reg_2227 <= tmp_42_cast_fu_878_p1(15 - 1 downto 0);
                integral_image_sq_ad_3_reg_2237 <= tmp_42_cast_fu_878_p1(15 - 1 downto 0);
                tmp_51_reg_2242 <= tmp_51_fu_884_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50))) then
                feature_above_reg_2640 <= FEATURES_above_q0;
                feature_below_reg_2635 <= FEATURES_below_q0;
                feature_rect1_weight_reg_2620 <= FEATURES_rect1_weigh_q0;
                feature_rect2_weight_reg_2625 <= FEATURES_rect2_weigh_q0;
                feature_rect3_weight_reg_2630 <= FEATURES_rect3_weigh_q0;
                feature_threshold_reg_2645 <= FEATURES_threshold_q0;
                tmp_18_i2_reg_2650 <= grp_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then
                    feature_index_1_cast_reg_2376(12 downto 0) <= feature_index_1_cast_fu_1151_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41))) then
                feature_index_2_reg_2370 <= feature_index_2_fu_1145_p2;
                stage_threshold_cast_reg_2365 <= stage_threshold_cast_fu_1141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then
                feature_rect1_y_reg_2423 <= FEATURES_rect1_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state45))) then
                feature_rect2_y_reg_2468 <= FEATURES_rect2_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then
                loc_V_4_reg_2325 <= loc_V_4_fu_1004_p1;
                loc_V_reg_2319 <= p_Val2_s_fu_990_p1(62 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state56))) then
                loc_V_5_reg_2680 <= p_Val2_11_fu_1683_p1(30 downto 23);
                loc_V_6_reg_2686 <= loc_V_6_fu_1697_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                mean_reg_2292 <= mean_fu_947_p2;
                tmp_8_i_reg_2298 <= tmp_8_i_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state54)) or ((ap_const_lv1_1 = ap_CS_fsm_state60)))) then
                reg_740 <= grp_fu_693_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state45)) or ((ap_const_lv1_1 = ap_CS_fsm_state47)) or ((ap_const_lv1_1 = ap_CS_fsm_state49)))) then
                reg_746 <= grp_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state57))) then
                result_V_2_reg_2691 <= result_V_2_fu_1792_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39))) then
                result_V_reg_2330 <= result_V_fu_1099_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                row_reg_2205 <= row_fu_813_p2;
                    tmp_30_reg_2188(15 downto 5) <= tmp_30_fu_798_p2(15 downto 5);
                tmp_47_reg_2194 <= tmp_47_fu_804_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state40))) then
                s_1_reg_2339 <= s_1_fu_1119_p2;
                tmp_11_reg_2335 <= tmp_11_fu_1113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51))) then
                thresh_reg_2655 <= thresh_fu_1633_p2;
                val1_reg_2660 <= val1_fu_1638_p2;
                val2_reg_2665 <= val2_fu_1643_p2;
                val3_reg_2670 <= val3_fu_1648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                tmp_10_i_reg_2304 <= grp_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                tmp_12_i_reg_2314 <= grp_fu_701_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then
                tmp_15_i2_reg_2548 <= tmp_15_i2_fu_1480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state48))) then
                tmp_18_i1_reg_2555 <= grp_fu_756_p2;
                tmp_80_reg_2565 <= tmp_80_fu_1555_p2;
                tmp_85_reg_2575 <= tmp_85_fu_1607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then
                tmp_18_i_reg_2498 <= grp_fu_756_p2;
                tmp_70_reg_2508 <= tmp_70_fu_1409_p2;
                tmp_75_reg_2518 <= tmp_75_fu_1462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42) and (ap_const_lv1_0 = exitcond_fu_1156_p2))) then
                tmp_19_reg_2405 <= tmp_19_fu_1161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                    tmp_33_reg_2210(15 downto 5) <= tmp_33_fu_848_p2(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (exitcond3_fu_888_p2 = ap_const_lv1_0))) then
                tmp_37_reg_2262 <= tmp_37_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then
                tmp_59_reg_2448 <= tmp_59_fu_1262_p2;
                tmp_65_reg_2458 <= tmp_65_fu_1315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                tmp_6_i_reg_2287 <= tmp_6_i_fu_936_p2;
                tmp_i_16_reg_2282 <= tmp_i_16_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                tmp_reg_2172 <= tmp_fu_762_p2;
                tmp_s_reg_2177 <= tmp_s_fu_768_p2;
            end if;
        end if;
    end process;
    tmp_30_reg_2188(4 downto 0) <= "00000";
    tmp_33_reg_2210(4 downto 0) <= "00000";
    feature_index_1_cast_reg_2376(31 downto 13) <= "0000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_888_p2, tmp_11_fu_1113_p2, exitcond_fu_1156_p2, tmp_17_fu_1171_p2, exitcond4_fu_808_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_808_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (not((exitcond3_fu_888_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if ((ap_const_lv1_0 = tmp_11_fu_1113_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if ((not((ap_const_lv1_0 = exitcond_fu_1156_p2)) and not((ap_const_lv1_0 = tmp_17_fu_1171_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                elsif ((not((ap_const_lv1_0 = exitcond_fu_1156_p2)) and (ap_const_lv1_0 = tmp_17_fu_1171_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    FEATURES_above_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_above_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_above_ce0 <= ap_const_logic_1;
        else 
            FEATURES_above_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_below_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_below_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_below_ce0 <= ap_const_logic_1;
        else 
            FEATURES_below_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect1_heigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect1_heigh_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            FEATURES_rect1_heigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect1_heigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect1_weigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect1_weigh_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_rect1_weigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect1_weigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect1_width_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect1_width_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            FEATURES_rect1_width_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect1_width_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect1_x_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect1_x_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            FEATURES_rect1_x_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect1_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect1_y_address0 <= feature_index_1_cast_fu_1151_p1(12 - 1 downto 0);

    FEATURES_rect1_y_ce0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
            FEATURES_rect1_y_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect1_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect2_heigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect2_heigh_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            FEATURES_rect2_heigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect2_heigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect2_weigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect2_weigh_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_rect2_weigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect2_weigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect2_width_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect2_width_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            FEATURES_rect2_width_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect2_width_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect2_x_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect2_x_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            FEATURES_rect2_x_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect2_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect2_y_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect2_y_ce0_assign_proc : process(ap_CS_fsm_state44)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            FEATURES_rect2_y_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect2_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect3_heigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect3_heigh_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            FEATURES_rect3_heigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect3_heigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect3_weigh_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect3_weigh_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_rect3_weigh_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect3_weigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect3_width_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect3_width_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            FEATURES_rect3_width_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect3_width_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect3_x_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect3_x_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            FEATURES_rect3_x_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect3_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_rect3_y_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_rect3_y_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state46))) then 
            FEATURES_rect3_y_ce0 <= ap_const_logic_1;
        else 
            FEATURES_rect3_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FEATURES_threshold_address0 <= feature_index_1_cast_reg_2376(12 - 1 downto 0);

    FEATURES_threshold_ce0_assign_proc : process(ap_CS_fsm_state49)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            FEATURES_threshold_ce0 <= ap_const_logic_1;
        else 
            FEATURES_threshold_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    STAGES_feature_count_address0 <= s_cast_fu_1107_p1(5 - 1 downto 0);

    STAGES_feature_count_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state40))) then 
            STAGES_feature_count_ce0 <= ap_const_logic_1;
        else 
            STAGES_feature_count_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    STAGES_threshold_address0 <= s_cast_fu_1107_p1(5 - 1 downto 0);

    STAGES_threshold_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state40))) then 
            STAGES_threshold_ce0 <= ap_const_logic_1;
        else 
            STAGES_threshold_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alr_found_o_assign_proc : process(alr_found_i, tmp_11_reg_2335, ap_CS_fsm_state65, tmp_15_fu_2144_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = tmp_11_reg_2335) and not((ap_const_lv1_0 = tmp_15_fu_2144_p2)))) then 
            alr_found_o <= ap_const_lv32_1;
        else 
            alr_found_o <= alr_found_i;
        end if; 
    end process;


    alr_found_o_ap_vld_assign_proc : process(tmp_11_reg_2335, ap_CS_fsm_state65, tmp_15_fu_2144_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state65) and (ap_const_lv1_0 = tmp_11_reg_2335) and not((ap_const_lv1_0 = tmp_15_fu_2144_p2)))) then 
            alr_found_o_ap_vld <= ap_const_logic_1;
        else 
            alr_found_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37 downto 37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38 downto 38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40 downto 40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44 downto 44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45 downto 45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46 downto 46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47 downto 47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51 downto 51);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55 downto 55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56 downto 56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57 downto 57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59 downto 59);
    ap_CS_fsm_state65 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond4_fu_808_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond4_fu_808_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond4_fu_808_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond4_fu_808_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_893_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(start_col_assign_reg_610));
    exitcond3_fu_888_p2 <= "1" when (start_col_assign_reg_610 = tmp_reg_2172) else "0";
    exitcond4_fu_808_p2 <= "1" when (start_row_assign_reg_598 = tmp_s_reg_2177) else "0";
    exitcond_fu_1156_p2 <= "1" when (feature_index_1_reg_657 = feature_index_2_reg_2370) else "0";
        feature_below_2_cast_fu_1673_p1 <= std_logic_vector(resize(signed(feature_below_2_fu_1667_p3),21));

    feature_below_2_fu_1667_p3 <= 
        feature_below_reg_2635 when (tmp_18_fu_1662_p2(0) = '1') else 
        feature_above_reg_2640;
    feature_index_1_cast_fu_1151_p1 <= std_logic_vector(resize(unsigned(feature_index_1_reg_657),32));
    feature_index_2_fu_1145_p2 <= std_logic_vector(unsigned(stage_feature_count_s_fu_1137_p1) + unsigned(feature_index_reg_622));
    feature_rect1_height_1_fu_1193_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect1_heigh_q0),8));
    feature_rect1_width_s_fu_1189_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect1_width_q0),9));
    feature_rect1_x_cast_fu_1182_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect1_x_q0),9));
    feature_rect1_y_cast_fu_1186_p1 <= std_logic_vector(resize(unsigned(feature_rect1_y_reg_2423),8));
    feature_rect2_height_1_fu_1340_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect2_heigh_q0),8));
    feature_rect2_width_s_fu_1336_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect2_width_q0),9));
    feature_rect2_x_cast_fu_1329_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect2_x_q0),9));
    feature_rect2_y_cast_fu_1333_p1 <= std_logic_vector(resize(unsigned(feature_rect2_y_reg_2468),8));
    feature_rect3_height_1_fu_1493_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect3_heigh_q0),8));
    feature_rect3_width_s_fu_1489_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect3_width_q0),9));
    feature_rect3_x_cast_fu_1485_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect3_x_q0),9));
    feature_rect3_y_cast_fu_1468_p1 <= std_logic_vector(resize(unsigned(FEATURES_rect3_y_q0),8));

    grp_fu_687_p0_assign_proc : process(ap_CS_fsm_state1, factor, reg_740, ap_CS_fsm_state6, ap_CS_fsm_state55)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)))) then 
            grp_fu_687_p0 <= reg_740;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_687_p0 <= factor;
        else 
            grp_fu_687_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_687_p1_assign_proc : process(ap_CS_fsm_state1, factor, ap_CS_fsm_state6, ap_CS_fsm_state55)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)))) then 
            grp_fu_687_p1 <= factor;
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            grp_fu_687_p1 <= ap_const_lv32_41C00000;
        else 
            grp_fu_687_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_693_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state40, result_V_2_reg_2691, start_row_assign_reg_598, start_col_assign_reg_610, ap_CS_fsm_state58)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            grp_fu_693_p0 <= result_V_2_reg_2691;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state40))) then 
            grp_fu_693_p0 <= start_col_assign_reg_610;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            grp_fu_693_p0 <= start_row_assign_reg_598;
        else 
            grp_fu_693_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_701_p0 <= std_logic_vector(unsigned(tmp_9_i_fu_978_p2) - unsigned(tmp_10_i_reg_2304));
    grp_fu_709_p2 <= std_logic_vector(unsigned(integral_image_q0) + unsigned(integral_image_q1));
    grp_fu_750_p2 <= std_logic_vector(unsigned(reg_746) - unsigned(integral_image_q0));
    grp_fu_756_p2 <= std_logic_vector(unsigned(grp_fu_750_p2) - unsigned(integral_image_q1));

    integral_image_address0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, tmp_43_cast_fu_914_p1, tmp_44_cast_fu_925_p1, tmp_75_cast_fu_1310_p1, tmp_71_cast_fu_1321_p1, tmp_85_cast_fu_1457_p1, tmp_81_cast_fu_1472_p1, tmp_95_cast_fu_1602_p1, tmp_91_cast_fu_1613_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            integral_image_address0 <= tmp_91_cast_fu_1613_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
            integral_image_address0 <= tmp_95_cast_fu_1602_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            integral_image_address0 <= tmp_81_cast_fu_1472_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state46))) then 
            integral_image_address0 <= tmp_85_cast_fu_1457_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            integral_image_address0 <= tmp_71_cast_fu_1321_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            integral_image_address0 <= tmp_75_cast_fu_1310_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            integral_image_address0 <= tmp_44_cast_fu_925_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_address0 <= tmp_43_cast_fu_914_p1(15 - 1 downto 0);
        else 
            integral_image_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_address1_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state8, integral_image_addr_5_reg_2227, ap_CS_fsm_state9, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48, tmp_41_cast_fu_867_p1, tmp_70_cast_fu_1257_p1, tmp_76_cast_fu_1325_p1, tmp_80_cast_fu_1404_p1, tmp_86_cast_fu_1476_p1, tmp_90_cast_fu_1550_p1, tmp_96_cast_fu_1617_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then 
            integral_image_address1 <= tmp_96_cast_fu_1617_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
            integral_image_address1 <= tmp_90_cast_fu_1550_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            integral_image_address1 <= tmp_86_cast_fu_1476_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state46))) then 
            integral_image_address1 <= tmp_80_cast_fu_1404_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state45))) then 
            integral_image_address1 <= tmp_76_cast_fu_1325_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state44))) then 
            integral_image_address1 <= tmp_70_cast_fu_1257_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            integral_image_address1 <= integral_image_addr_5_reg_2227;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_address1 <= tmp_41_cast_fu_867_p1(15 - 1 downto 0);
        else 
            integral_image_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_ce0_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state45)) or ((ap_const_lv1_1 = ap_CS_fsm_state47)) or ((ap_const_lv1_1 = ap_CS_fsm_state49)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state46)) or ((ap_const_lv1_1 = ap_CS_fsm_state48)))) then 
            integral_image_ce0 <= ap_const_logic_1;
        else 
            integral_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_ce1_assign_proc : process(ap_CS_fsm_state45, ap_CS_fsm_state47, ap_CS_fsm_state49, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state44, ap_CS_fsm_state46, ap_CS_fsm_state48)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state45)) or ((ap_const_lv1_1 = ap_CS_fsm_state47)) or ((ap_const_lv1_1 = ap_CS_fsm_state49)) or ((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state46)) or ((ap_const_lv1_1 = ap_CS_fsm_state48)))) then 
            integral_image_ce1 <= ap_const_logic_1;
        else 
            integral_image_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_sq_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_43_cast_fu_914_p1, tmp_44_cast_fu_925_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            integral_image_sq_address0 <= tmp_44_cast_fu_925_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_sq_address0 <= tmp_43_cast_fu_914_p1(15 - 1 downto 0);
        else 
            integral_image_sq_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_sq_address1_assign_proc : process(ap_CS_fsm_state8, integral_image_sq_ad_3_reg_2237, ap_CS_fsm_state9, tmp_41_cast_fu_867_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            integral_image_sq_address1 <= integral_image_sq_ad_3_reg_2237;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_sq_address1 <= tmp_41_cast_fu_867_p1(15 - 1 downto 0);
        else 
            integral_image_sq_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_sq_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            integral_image_sq_ce0 <= ap_const_logic_1;
        else 
            integral_image_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_sq_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state8)) or ((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            integral_image_sq_ce1 <= ap_const_logic_1;
        else 
            integral_image_sq_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_2_fu_1721_p3 <= sh_assign_5_fu_1715_p2(8 downto 8);
    isNeg_fu_1028_p3 <= sh_assign_fu_1022_p2(11 downto 11);
    loc_V_4_fu_1004_p1 <= p_Val2_s_fu_990_p1(52 - 1 downto 0);
    loc_V_6_fu_1697_p1 <= p_Val2_11_fu_1683_p1(23 - 1 downto 0);
    mean_fu_947_p2 <= std_logic_vector(unsigned(tmp_5_i_fu_942_p2) - unsigned(integral_image_q1));
    p_Result_8_fu_1701_p3 <= (ap_const_lv1_1 & loc_V_6_reg_2686);
    p_Result_s_fu_1008_p3 <= (ap_const_lv1_1 & loc_V_4_reg_2325);
    p_Val2_11_fu_1683_p1 <= grp_fu_687_p2;
    p_Val2_s_fu_990_p1 <= grp_fu_704_p2;
    p_shl10_cast_fu_1376_p1 <= std_logic_vector(resize(unsigned(tmp_66_fu_1368_p3),16));
    p_shl11_cast_fu_1388_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_1380_p3),16));
    p_shl12_cast_fu_1282_p1 <= std_logic_vector(resize(unsigned(tmp_60_fu_1274_p3),16));
    p_shl13_cast_fu_1294_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_1286_p3),16));
    p_shl14_cast_fu_1229_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_1221_p3),16));
    p_shl15_cast_fu_1241_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_1233_p3),16));
    p_shl1_cast_fu_790_p3 <= (tmp_46_fu_786_p1 & ap_const_lv5_0);
    p_shl2_cast_fu_832_p1 <= std_logic_vector(resize(unsigned(tmp_31_fu_824_p3),16));
    p_shl3_cast_fu_844_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_836_p3),16));
    p_shl4_cast_fu_1574_p1 <= std_logic_vector(resize(unsigned(tmp_81_fu_1566_p3),16));
    p_shl5_cast_fu_1586_p1 <= std_logic_vector(resize(unsigned(tmp_82_fu_1578_p3),16));
    p_shl6_cast_fu_1523_p1 <= std_logic_vector(resize(unsigned(tmp_76_fu_1516_p3),16));
    p_shl7_cast_fu_1534_p1 <= std_logic_vector(resize(unsigned(tmp_77_fu_1527_p3),16));
    p_shl8_cast_fu_1429_p1 <= std_logic_vector(resize(unsigned(tmp_71_fu_1421_p3),16));
    p_shl9_cast_fu_1441_p1 <= std_logic_vector(resize(unsigned(tmp_72_fu_1433_p3),16));
    p_shl_cast_fu_778_p3 <= (tmp_45_fu_774_p1 & ap_const_lv7_0);
    result_V_2_fu_1792_p3 <= 
        tmp_40_fu_1778_p1 when (isNeg_2_fu_1721_p3(0) = '1') else 
        tmp_41_fu_1782_p4;
    result_V_fu_1099_p3 <= 
        tmp_38_fu_1085_p1 when (isNeg_fu_1028_p3(0) = '1') else 
        tmp_39_fu_1089_p4;
    row_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(start_row_assign_reg_598));
    s_1_fu_1119_p2 <= std_logic_vector(unsigned(s_reg_646) + unsigned(ap_const_lv5_1));
    s_cast_fu_1107_p1 <= std_logic_vector(resize(unsigned(s_reg_646),32));
        sh_assign_4_cast_fu_1053_p1 <= std_logic_vector(resize(signed(sh_assign_4_fu_1045_p3),32));

    sh_assign_4_fu_1045_p3 <= 
        tmp_i_i_i_cast_fu_1041_p1 when (isNeg_fu_1028_p3(0) = '1') else 
        sh_assign_fu_1022_p2;
    sh_assign_5_fu_1715_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i1_cast5_fu_1712_p1));
        sh_assign_6_cast_cas_fu_1750_p1 <= std_logic_vector(resize(signed(sh_assign_6_fu_1738_p3),24));

        sh_assign_6_cast_fu_1746_p1 <= std_logic_vector(resize(signed(sh_assign_6_fu_1738_p3),32));

    sh_assign_6_fu_1738_p3 <= 
        tmp_4_i_i_cast_fu_1734_p1 when (isNeg_2_fu_1721_p3(0) = '1') else 
        sh_assign_5_fu_1715_p2;
    sh_assign_fu_1022_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_i_cast7_fu_1019_p1));
    stage_accum_1_fu_1677_p2 <= std_logic_vector(unsigned(stage_accum_reg_667) + unsigned(feature_below_2_cast_fu_1673_p1));
        stage_accum_cast_cas_fu_1167_p1 <= std_logic_vector(resize(signed(stage_accum_reg_667),26));

    stage_feature_count_s_fu_1137_p1 <= std_logic_vector(resize(unsigned(STAGES_feature_count_q0),13));
        stage_threshold_cast_fu_1141_p1 <= std_logic_vector(resize(signed(STAGES_threshold_q0),21));

    sum_i1_fu_1268_p2 <= std_logic_vector(unsigned(tmp_15_i_fu_1216_p2) + unsigned(feature_rect1_height_1_fu_1193_p1));
    sum_i2_fu_1415_p2 <= std_logic_vector(unsigned(tmp_15_i1_fu_1363_p2) + unsigned(feature_rect2_height_1_fu_1340_p1));
    sum_i3_fu_1561_p2 <= std_logic_vector(unsigned(tmp_15_i2_reg_2548) + unsigned(feature_rect3_height_1_fu_1493_p1));
    sum_i_fu_819_p2 <= std_logic_vector(unsigned(tmp_47_reg_2194) + unsigned(ap_const_lv8_18));
    thresh_fu_1633_p1 <= feature_threshold_reg_2645;
    thresh_fu_1633_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(result_V_reg_2330) * signed(thresh_fu_1633_p1))), 32));
    tmp1_fu_1653_p2 <= std_logic_vector(unsigned(val3_reg_2670) + unsigned(val1_reg_2660));
    tmp_11_fu_1113_p2 <= "1" when (unsigned(s_reg_646) < unsigned(ap_const_lv5_19)) else "0";
    tmp_15_fu_2144_p2 <= "1" when (alr_found_i = ap_const_lv32_0) else "0";
    tmp_15_i1_fu_1363_p2 <= std_logic_vector(unsigned(tmp_47_reg_2194) + unsigned(feature_rect2_y_cast_fu_1333_p1));
    tmp_15_i2_fu_1480_p2 <= std_logic_vector(unsigned(tmp_47_reg_2194) + unsigned(feature_rect3_y_cast_fu_1468_p1));
    tmp_15_i_fu_1216_p2 <= std_logic_vector(unsigned(tmp_47_reg_2194) + unsigned(feature_rect1_y_cast_fu_1186_p1));
    tmp_16_fu_2154_p2 <= "1" when (signed(total_stage_accum_ca_fu_1935_p1) > signed(best_accum)) else "0";
    tmp_17_fu_1171_p2 <= "1" when (signed(stage_accum_reg_667) < signed(stage_threshold_cast_reg_2365)) else "0";
    tmp_18_fu_1662_p2 <= "1" when (signed(total_val_fu_1657_p2) < signed(thresh_reg_2655)) else "0";
    tmp_19_fu_1161_p2 <= std_logic_vector(unsigned(feature_index_1_reg_657) + unsigned(ap_const_lv13_1));
    tmp_1_i_i_i_cast_fu_1061_p1 <= std_logic_vector(resize(unsigned(sh_assign_4_cast_fu_1053_p1),53));
    tmp_1_i_i_i_fu_1057_p1 <= std_logic_vector(resize(unsigned(sh_assign_4_cast_fu_1053_p1),136));
    tmp_2_i_i_fu_1708_p1 <= std_logic_vector(resize(unsigned(p_Result_8_fu_1701_p3),78));
    tmp_2_i_i_i_fu_1065_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_1008_p3),to_integer(unsigned('0' & tmp_1_i_i_i_cast_fu_1061_p1(31-1 downto 0)))));
    tmp_30_fu_798_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_790_p3) + unsigned(p_shl_cast_fu_778_p3));
    tmp_31_fu_824_p3 <= (sum_i_fu_819_p2 & ap_const_lv7_0);
    tmp_32_fu_836_p3 <= (sum_i_fu_819_p2 & ap_const_lv5_0);
    tmp_33_fu_848_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_844_p1) + unsigned(p_shl2_cast_fu_832_p1));
    tmp_34_fu_862_p2 <= std_logic_vector(unsigned(tmp_30_reg_2188) + unsigned(tmp_50_fu_858_p1));
    tmp_35_fu_873_p2 <= std_logic_vector(unsigned(tmp_33_reg_2210) + unsigned(tmp_50_fu_858_p1));
    tmp_36_fu_909_p2 <= std_logic_vector(unsigned(tmp_i_cast_cast_fu_905_p1) + unsigned(tmp_33_reg_2210));
    tmp_37_fu_920_p2 <= std_logic_vector(unsigned(tmp_i_cast_cast_fu_905_p1) + unsigned(tmp_30_reg_2188));
    tmp_38_fu_1085_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_1077_p3),32));
    tmp_39_fu_1089_p4 <= tmp_3_i_i_i_fu_1071_p2(83 downto 52);
    tmp_3_i_i_i_fu_1071_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_1015_p1),to_integer(unsigned('0' & tmp_1_i_i_i_fu_1057_p1(31-1 downto 0)))));
    tmp_40_fu_1778_p1 <= std_logic_vector(resize(unsigned(tmp_97_fu_1770_p3),32));
    tmp_41_cast_fu_867_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_862_p2),32));
    tmp_41_fu_1782_p4 <= tmp_9_i_i_fu_1764_p2(54 downto 23);
    tmp_42_cast_fu_878_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_873_p2),32));
    tmp_43_cast_fu_914_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_909_p2),32));
    tmp_44_cast_fu_925_p1 <= std_logic_vector(resize(unsigned(tmp_37_reg_2262),32));
    tmp_45_fu_774_p1 <= start_row_assign_reg_598(9 - 1 downto 0);
    tmp_46_fu_786_p1 <= start_row_assign_reg_598(11 - 1 downto 0);
    tmp_47_fu_804_p1 <= start_row_assign_reg_598(8 - 1 downto 0);
        tmp_4_i_i_cast_fu_1734_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_1729_p2),9));

    tmp_4_i_i_fu_1729_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_5_reg_2680));
    tmp_50_fu_858_p1 <= start_col_assign_reg_610(16 - 1 downto 0);
    tmp_51_fu_884_p1 <= start_col_assign_reg_610(9 - 1 downto 0);
    tmp_53_fu_1221_p3 <= (tmp_15_i_fu_1216_p2 & ap_const_lv7_0);
    tmp_54_fu_968_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_i_reg_2298),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    tmp_55_fu_973_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_i_reg_2298),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    tmp_56_fu_1233_p3 <= (tmp_15_i_fu_1216_p2 & ap_const_lv5_0);
    tmp_57_fu_1245_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1241_p1) + unsigned(p_shl14_cast_fu_1229_p1));
    tmp_58_fu_1251_p2 <= std_logic_vector(unsigned(tmp_57_fu_1245_p2) + unsigned(tmp_i1_cast_cast_fu_1202_p1));
    tmp_59_fu_1262_p2 <= std_logic_vector(unsigned(tmp_57_fu_1245_p2) + unsigned(tmp_i1_cast_cast_20_fu_1212_p1));
    tmp_5_i_fu_942_p2 <= std_logic_vector(unsigned(tmp_i_16_reg_2282) - unsigned(integral_image_q0));
    tmp_60_fu_1274_p3 <= (sum_i1_fu_1268_p2 & ap_const_lv7_0);
    tmp_61_fu_1286_p3 <= (sum_i1_fu_1268_p2 & ap_const_lv5_0);
    tmp_62_fu_1077_p3 <= tmp_2_i_i_i_fu_1065_p2(52 downto 52);
    tmp_63_fu_1298_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1294_p1) + unsigned(p_shl12_cast_fu_1282_p1));
    tmp_64_fu_1304_p2 <= std_logic_vector(unsigned(tmp_63_fu_1298_p2) + unsigned(tmp_i1_cast_cast_20_fu_1212_p1));
    tmp_65_fu_1315_p2 <= std_logic_vector(unsigned(tmp_63_fu_1298_p2) + unsigned(tmp_i1_cast_cast_fu_1202_p1));
    tmp_66_fu_1368_p3 <= (tmp_15_i1_fu_1363_p2 & ap_const_lv7_0);
    tmp_67_fu_1380_p3 <= (tmp_15_i1_fu_1363_p2 & ap_const_lv5_0);
    tmp_68_fu_1392_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1388_p1) + unsigned(p_shl10_cast_fu_1376_p1));
    tmp_69_fu_1398_p2 <= std_logic_vector(unsigned(tmp_68_fu_1392_p2) + unsigned(tmp_i2_cast_cast_fu_1349_p1));
    tmp_6_i_fu_936_p2 <= std_logic_vector(unsigned(integral_image_sq_q1) + unsigned(integral_image_sq_q0));
    tmp_6_i_i_fu_1754_p1 <= std_logic_vector(resize(unsigned(sh_assign_6_cast_fu_1746_p1),78));
    tmp_70_cast_fu_1257_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_1251_p2),32));
    tmp_70_fu_1409_p2 <= std_logic_vector(unsigned(tmp_68_fu_1392_p2) + unsigned(tmp_i2_cast_cast_22_fu_1359_p1));
    tmp_71_cast_fu_1321_p1 <= std_logic_vector(resize(unsigned(tmp_59_reg_2448),32));
    tmp_71_fu_1421_p3 <= (sum_i2_fu_1415_p2 & ap_const_lv7_0);
    tmp_72_fu_1433_p3 <= (sum_i2_fu_1415_p2 & ap_const_lv5_0);
    tmp_73_fu_1445_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1441_p1) + unsigned(p_shl8_cast_fu_1429_p1));
    tmp_74_fu_1451_p2 <= std_logic_vector(unsigned(tmp_73_fu_1445_p2) + unsigned(tmp_i2_cast_cast_22_fu_1359_p1));
    tmp_75_cast_fu_1310_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_1304_p2),32));
    tmp_75_fu_1462_p2 <= std_logic_vector(unsigned(tmp_73_fu_1445_p2) + unsigned(tmp_i2_cast_cast_fu_1349_p1));
    tmp_76_cast_fu_1325_p1 <= std_logic_vector(resize(unsigned(tmp_65_reg_2458),32));
    tmp_76_fu_1516_p3 <= (tmp_15_i2_reg_2548 & ap_const_lv7_0);
    tmp_77_fu_1527_p3 <= (tmp_15_i2_reg_2548 & ap_const_lv5_0);
    tmp_78_fu_1538_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1534_p1) + unsigned(p_shl6_cast_fu_1523_p1));
    tmp_79_fu_1544_p2 <= std_logic_vector(unsigned(tmp_78_fu_1538_p2) + unsigned(tmp_i3_cast_cast_fu_1502_p1));
    tmp_7_i_fu_953_p2 <= std_logic_vector(unsigned(tmp_6_i_reg_2287) - unsigned(integral_image_sq_q0));
    tmp_7_i_i_fu_1758_p2 <= std_logic_vector(shift_right(unsigned(p_Result_8_fu_1701_p3),to_integer(unsigned('0' & sh_assign_6_cast_cas_fu_1750_p1(24-1 downto 0)))));
    tmp_80_cast_fu_1404_p1 <= std_logic_vector(resize(unsigned(tmp_69_fu_1398_p2),32));
    tmp_80_fu_1555_p2 <= std_logic_vector(unsigned(tmp_78_fu_1538_p2) + unsigned(tmp_i3_cast_cast_24_fu_1512_p1));
    tmp_81_cast_fu_1472_p1 <= std_logic_vector(resize(unsigned(tmp_70_reg_2508),32));
    tmp_81_fu_1566_p3 <= (sum_i3_fu_1561_p2 & ap_const_lv7_0);
    tmp_82_fu_1578_p3 <= (sum_i3_fu_1561_p2 & ap_const_lv5_0);
    tmp_83_fu_1590_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_1586_p1) + unsigned(p_shl4_cast_fu_1574_p1));
    tmp_84_fu_1596_p2 <= std_logic_vector(unsigned(tmp_83_fu_1590_p2) + unsigned(tmp_i3_cast_cast_24_fu_1512_p1));
    tmp_85_cast_fu_1457_p1 <= std_logic_vector(resize(unsigned(tmp_74_fu_1451_p2),32));
    tmp_85_fu_1607_p2 <= std_logic_vector(unsigned(tmp_83_fu_1590_p2) + unsigned(tmp_i3_cast_cast_fu_1502_p1));
    tmp_86_cast_fu_1476_p1 <= std_logic_vector(resize(unsigned(tmp_75_reg_2518),32));
    tmp_8_i_fu_958_p2 <= std_logic_vector(unsigned(tmp_7_i_fu_953_p2) - unsigned(integral_image_sq_q1));
    tmp_90_cast_fu_1550_p1 <= std_logic_vector(resize(unsigned(tmp_79_fu_1544_p2),32));
    tmp_91_cast_fu_1613_p1 <= std_logic_vector(resize(unsigned(tmp_80_reg_2565),32));
    tmp_95_cast_fu_1602_p1 <= std_logic_vector(resize(unsigned(tmp_84_fu_1596_p2),32));
    tmp_96_cast_fu_1617_p1 <= std_logic_vector(resize(unsigned(tmp_85_reg_2575),32));
    tmp_97_fu_1770_p3 <= tmp_7_i_i_fu_1758_p2(23 downto 23);
    tmp_9_i_fu_978_p2 <= std_logic_vector(unsigned(tmp_55_fu_973_p2) + unsigned(tmp_54_fu_968_p2));
    tmp_9_i_i_fu_1764_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_1708_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_1754_p1(31-1 downto 0)))));
    tmp_fu_762_p2 <= std_logic_vector(unsigned(width) + unsigned(ap_const_lv32_FFFFFFE8));
    tmp_i1_19_fu_1206_p2 <= std_logic_vector(unsigned(tmp_i1_fu_1197_p2) + unsigned(feature_rect1_width_s_fu_1189_p1));
    tmp_i1_cast_cast_20_fu_1212_p1 <= std_logic_vector(resize(unsigned(tmp_i1_19_fu_1206_p2),16));
    tmp_i1_cast_cast_fu_1202_p1 <= std_logic_vector(resize(unsigned(tmp_i1_fu_1197_p2),16));
    tmp_i1_fu_1197_p2 <= std_logic_vector(unsigned(tmp_51_reg_2242) + unsigned(feature_rect1_x_cast_fu_1182_p1));
    tmp_i2_21_fu_1353_p2 <= std_logic_vector(unsigned(tmp_i2_fu_1344_p2) + unsigned(feature_rect2_width_s_fu_1336_p1));
    tmp_i2_cast_cast_22_fu_1359_p1 <= std_logic_vector(resize(unsigned(tmp_i2_21_fu_1353_p2),16));
    tmp_i2_cast_cast_fu_1349_p1 <= std_logic_vector(resize(unsigned(tmp_i2_fu_1344_p2),16));
    tmp_i2_fu_1344_p2 <= std_logic_vector(unsigned(tmp_51_reg_2242) + unsigned(feature_rect2_x_cast_fu_1329_p1));
    tmp_i3_23_fu_1506_p2 <= std_logic_vector(unsigned(tmp_i3_fu_1497_p2) + unsigned(feature_rect3_width_s_fu_1489_p1));
    tmp_i3_cast_cast_24_fu_1512_p1 <= std_logic_vector(resize(unsigned(tmp_i3_23_fu_1506_p2),16));
    tmp_i3_cast_cast_fu_1502_p1 <= std_logic_vector(resize(unsigned(tmp_i3_fu_1497_p2),16));
    tmp_i3_fu_1497_p2 <= std_logic_vector(unsigned(tmp_51_reg_2242) + unsigned(feature_rect3_x_cast_fu_1485_p1));
    tmp_i_16_fu_930_p2 <= std_logic_vector(unsigned(integral_image_q1) + unsigned(integral_image_q0));
    tmp_i_cast_cast_fu_905_p1 <= std_logic_vector(resize(unsigned(tmp_i_fu_899_p2),16));
    tmp_i_fu_899_p2 <= std_logic_vector(unsigned(ap_const_lv9_18) + unsigned(tmp_51_fu_884_p1));
    tmp_i_i_i1_cast5_fu_1712_p1 <= std_logic_vector(resize(unsigned(loc_V_5_reg_2680),9));
    tmp_i_i_i_17_fu_1036_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_reg_2319));
        tmp_i_i_i_cast_fu_1041_p1 <= std_logic_vector(resize(signed(tmp_i_i_i_17_fu_1036_p2),12));

    tmp_i_i_i_fu_1015_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_1008_p3),136));
    tmp_i_i_i_i_cast7_fu_1019_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_2319),12));
    tmp_s_fu_768_p2 <= std_logic_vector(unsigned(height) + unsigned(ap_const_lv32_FFFFFFE8));
    total_stage_accum_1_fu_1176_p2 <= std_logic_vector(signed(stage_accum_cast_cas_fu_1167_p1) + signed(total_stage_accum_reg_634));
        total_stage_accum_ca_fu_1935_p1 <= std_logic_vector(resize(signed(total_stage_accum_reg_634),32));

    total_val_fu_1657_p2 <= std_logic_vector(unsigned(val2_reg_2665) + unsigned(tmp1_fu_1653_p2));
    val1_fu_1638_p1 <= feature_rect1_weight_reg_2620;
    val1_fu_1638_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_18_i_reg_2498) * signed(val1_fu_1638_p1))), 32));
    val2_fu_1643_p1 <= val2_fu_1643_p10(9 - 1 downto 0);
    val2_fu_1643_p10 <= std_logic_vector(resize(unsigned(feature_rect2_weight_reg_2625),32));
    val2_fu_1643_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_18_i1_reg_2555) * signed('0' &val2_fu_1643_p1))), 32));
    val3_fu_1648_p1 <= val3_fu_1648_p10(9 - 1 downto 0);
    val3_fu_1648_p10 <= std_logic_vector(resize(unsigned(feature_rect3_weight_reg_2630),32));
    val3_fu_1648_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_18_i2_reg_2650) * signed('0' &val3_fu_1648_p1))), 32));
end behav;
