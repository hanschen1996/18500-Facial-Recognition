-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detect_face is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    orig_image_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    orig_image_ce0 : OUT STD_LOGIC;
    orig_image_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    success : OUT STD_LOGIC_VECTOR (31 downto 0);
    success_ap_vld : OUT STD_LOGIC );
end;


architecture behav of detect_face is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "detect_face,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.430000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=182,HLS_SYN_DSP=28,HLS_SYN_FF=5766,HLS_SYN_LUT=9693}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_42F00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010111100000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_43200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011001000000000000000000000";
    constant ap_const_lv64_3FF3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110011001100110011001100110011001100110011001100110011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alr_found : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_17_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_807 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_2_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_2_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_reg_824 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_829 : STD_LOGIC_VECTOR (63 downto 0);
    signal integral_image_sq_ad_reg_834 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal integral_image_sq_ad_1_reg_839 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_sq_ad_2_reg_844 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_addr_reg_854 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_addr_1_reg_859 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_addr_2_reg_864 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_2_fu_529_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal col_2_reg_872 : STD_LOGIC_VECTOR (14 downto 0);
    signal accum_1_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_1_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_796_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_sq_1_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_890 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal factor_1_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal factor_1_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal loc_V_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal loc_V_1_fu_576_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_908 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_2_reg_913 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_3_fu_594_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_919 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_V_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal result_V_1_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal image_ce0 : STD_LOGIC;
    signal image_we0 : STD_LOGIC;
    signal image_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal integral_image_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_ce0 : STD_LOGIC;
    signal integral_image_we0 : STD_LOGIC;
    signal integral_image_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal integral_image_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal integral_image_ce1 : STD_LOGIC;
    signal integral_image_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal integral_image_sq_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal integral_image_sq_ce0 : STD_LOGIC;
    signal integral_image_sq_we0 : STD_LOGIC;
    signal integral_image_sq_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal integral_image_sq_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal integral_image_sq_ce1 : STD_LOGIC;
    signal integral_image_sq_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascade_classifier_fu_282_ap_start : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_ap_done : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_ap_idle : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_ap_ready : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_integral_image_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cascade_classifier_fu_282_integral_image_ce0 : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_integral_image_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cascade_classifier_fu_282_integral_image_ce1 : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_integral_image_sq_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cascade_classifier_fu_282_integral_image_sq_ce0 : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_integral_image_sq_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_cascade_classifier_fu_282_integral_image_sq_ce1 : STD_LOGIC;
    signal grp_cascade_classifier_fu_282_alr_found_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascade_classifier_fu_282_alr_found_o_ap_vld : STD_LOGIC;
    signal grp_downscale_fu_346_ap_start : STD_LOGIC;
    signal grp_downscale_fu_346_ap_done : STD_LOGIC;
    signal grp_downscale_fu_346_ap_idle : STD_LOGIC;
    signal grp_downscale_fu_346_ap_ready : STD_LOGIC;
    signal grp_downscale_fu_346_src_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_downscale_fu_346_src_ce0 : STD_LOGIC;
    signal grp_downscale_fu_346_dest_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_downscale_fu_346_dest_ce0 : STD_LOGIC;
    signal grp_downscale_fu_346_dest_we0 : STD_LOGIC;
    signal grp_downscale_fu_346_dest_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal factor_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_width_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_height_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_247 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal accum_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_sq_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_cascade_classifier_fu_282_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_downscale_fu_346_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_9_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_cast_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_8_fu_556_p2 : signal is "no";
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_418_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_406_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_432_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_460_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_472_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_480_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl2_cast_fu_468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_cast_cast_fu_496_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_598_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_cast2_fu_609_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_612_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_cast_fu_631_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_635_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_647_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_fu_605_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_6_i_i_fu_651_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_7_i_i_fu_655_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_667_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_fu_661_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_19_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_679_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_697_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i6_cast1_fu_708_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_711_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i9_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_1_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i9_cast_fu_730_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_734_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_746_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i5_fu_704_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_6_i_i1_fu_750_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_7_i_i1_fu_754_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_fu_766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i1_fu_760_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_22_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_778_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_796_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_fu_539_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_374_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component cascade_classifier IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        integral_image_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_image_ce0 : OUT STD_LOGIC;
        integral_image_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        integral_image_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_image_ce1 : OUT STD_LOGIC;
        integral_image_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        integral_image_sq_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_image_sq_ce0 : OUT STD_LOGIC;
        integral_image_sq_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        integral_image_sq_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        integral_image_sq_ce1 : OUT STD_LOGIC;
        integral_image_sq_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        factor : IN STD_LOGIC_VECTOR (31 downto 0);
        alr_found_i : IN STD_LOGIC_VECTOR (31 downto 0);
        alr_found_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        alr_found_o_ap_vld : OUT STD_LOGIC );
    end component;


    component downscale IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        dest_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        dest_ce0 : OUT STD_LOGIC;
        dest_we0 : OUT STD_LOGIC;
        dest_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_fdiv_Gfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_fptruHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_fpextIfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detect_face_dmul_JfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component detect_face_mac_mKfY IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component detect_face_image IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component detect_face_integEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    image_U : component detect_face_image
    generic map (
        DataWidth => 8,
        AddressRange => 19200,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => image_address0,
        ce0 => image_ce0,
        we0 => image_we0,
        d0 => grp_downscale_fu_346_dest_d0,
        q0 => image_q0);

    integral_image_U : component detect_face_integEe0
    generic map (
        DataWidth => 32,
        AddressRange => 19200,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => integral_image_address0,
        ce0 => integral_image_ce0,
        we0 => integral_image_we0,
        d0 => integral_image_d0,
        q0 => integral_image_q0,
        address1 => grp_cascade_classifier_fu_282_integral_image_address1,
        ce1 => integral_image_ce1,
        q1 => integral_image_q1);

    integral_image_sq_U : component detect_face_integEe0
    generic map (
        DataWidth => 32,
        AddressRange => 19200,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => integral_image_sq_address0,
        ce0 => integral_image_sq_ce0,
        we0 => integral_image_sq_we0,
        d0 => integral_image_sq_d0,
        q0 => integral_image_sq_q0,
        address1 => grp_cascade_classifier_fu_282_integral_image_sq_address1,
        ce1 => integral_image_sq_ce1,
        q1 => integral_image_sq_q1);

    grp_cascade_classifier_fu_282 : component cascade_classifier
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascade_classifier_fu_282_ap_start,
        ap_done => grp_cascade_classifier_fu_282_ap_done,
        ap_idle => grp_cascade_classifier_fu_282_ap_idle,
        ap_ready => grp_cascade_classifier_fu_282_ap_ready,
        integral_image_address0 => grp_cascade_classifier_fu_282_integral_image_address0,
        integral_image_ce0 => grp_cascade_classifier_fu_282_integral_image_ce0,
        integral_image_q0 => integral_image_q0,
        integral_image_address1 => grp_cascade_classifier_fu_282_integral_image_address1,
        integral_image_ce1 => grp_cascade_classifier_fu_282_integral_image_ce1,
        integral_image_q1 => integral_image_q1,
        integral_image_sq_address0 => grp_cascade_classifier_fu_282_integral_image_sq_address0,
        integral_image_sq_ce0 => grp_cascade_classifier_fu_282_integral_image_sq_ce0,
        integral_image_sq_q0 => integral_image_sq_q0,
        integral_image_sq_address1 => grp_cascade_classifier_fu_282_integral_image_sq_address1,
        integral_image_sq_ce1 => grp_cascade_classifier_fu_282_integral_image_sq_ce1,
        integral_image_sq_q1 => integral_image_sq_q1,
        height => curr_height_reg_224,
        width => curr_width_reg_212,
        factor => factor_reg_200,
        alr_found_i => alr_found,
        alr_found_o => grp_cascade_classifier_fu_282_alr_found_o,
        alr_found_o_ap_vld => grp_cascade_classifier_fu_282_alr_found_o_ap_vld);

    grp_downscale_fu_346 : component downscale
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_downscale_fu_346_ap_start,
        ap_done => grp_downscale_fu_346_ap_done,
        ap_idle => grp_downscale_fu_346_ap_idle,
        ap_ready => grp_downscale_fu_346_ap_ready,
        src_address0 => grp_downscale_fu_346_src_address0,
        src_ce0 => grp_downscale_fu_346_src_ce0,
        src_q0 => orig_image_q0,
        dest_address0 => grp_downscale_fu_346_dest_address0,
        dest_ce0 => grp_downscale_fu_346_dest_ce0,
        dest_we0 => grp_downscale_fu_346_dest_we0,
        dest_d0 => grp_downscale_fu_346_dest_d0,
        height => curr_height_reg_224,
        width => curr_width_reg_212);

    detect_face_fdiv_Gfk_U41 : component detect_face_fdiv_Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_42F00000,
        din1 => factor_1_reg_895,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);

    detect_face_fdiv_Gfk_U42 : component detect_face_fdiv_Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43200000,
        din1 => factor_1_reg_895,
        ce => ap_const_logic_1,
        dout => grp_fu_362_p2);

    detect_face_fptruHfu_U43 : component detect_face_fptruHfu
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_reg_890,
        dout => factor_1_fu_367_p1);

    detect_face_fpextIfE_U44 : component detect_face_fpextIfE
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => factor_reg_200,
        dout => tmp_1_fu_370_p1);

    detect_face_dmul_JfO_U45 : component detect_face_dmul_JfO
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_829,
        din1 => ap_const_lv64_3FF3333333333333,
        ce => grp_fu_374_ce,
        dout => grp_fu_374_p2);

    detect_face_mac_mKfY_U46 : component detect_face_mac_mKfY
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_796_p0,
        din1 => grp_fu_796_p1,
        din2 => accum_sq_reg_270,
        dout => grp_fu_796_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_cascade_classifier_fu_282_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_cascade_classifier_fu_282_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((exitcond1_fu_436_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_cascade_classifier_fu_282_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cascade_classifier_fu_282_ap_ready)) then 
                    ap_reg_grp_cascade_classifier_fu_282_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_downscale_fu_346_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_downscale_fu_346_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_9_fu_391_p2)))) then 
                    ap_reg_grp_downscale_fu_346_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_downscale_fu_346_ap_ready)) then 
                    ap_reg_grp_downscale_fu_346_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    accum_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond1_fu_436_p2 = ap_const_lv1_0))) then 
                accum_reg_258 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                accum_reg_258 <= accum_1_reg_877;
            end if; 
        end if;
    end process;

    accum_sq_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond1_fu_436_p2 = ap_const_lv1_0))) then 
                accum_sq_reg_270 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                accum_sq_reg_270 <= accum_sq_1_reg_883;
            end if; 
        end if;
    end process;

    col_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond1_fu_436_p2 = ap_const_lv1_0))) then 
                col_reg_247 <= ap_const_lv15_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                col_reg_247 <= col_2_reg_872;
            end if; 
        end if;
    end process;

    curr_height_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                curr_height_reg_224 <= result_V_fu_689_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                curr_height_reg_224 <= ap_const_lv32_78;
            end if; 
        end if;
    end process;

    curr_width_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                curr_width_reg_212 <= result_V_1_fu_788_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                curr_width_reg_212 <= ap_const_lv32_A0;
            end if; 
        end if;
    end process;

    factor_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then 
                factor_reg_200 <= factor_1_reg_895;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                factor_reg_200 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    row_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond_fu_523_p2)))) then 
                row_reg_236 <= row_2_reg_815;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = grp_downscale_fu_346_ap_done)))) then 
                row_reg_236 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                accum_1_reg_877 <= accum_1_fu_543_p2;
                accum_sq_1_reg_883 <= grp_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and (ap_const_logic_1 = grp_cascade_classifier_fu_282_alr_found_o_ap_vld))) then
                alr_found <= grp_cascade_classifier_fu_282_alr_found_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                col_2_reg_872 <= col_2_fu_529_p2;
                integral_image_addr_1_reg_859 <= tmp_31_cast_fu_505_p1(15 - 1 downto 0);
                integral_image_addr_2_reg_864 <= tmp_32_cast_fu_516_p1(15 - 1 downto 0);
                integral_image_addr_reg_854 <= col_cast_fu_490_p1(15 - 1 downto 0);
                integral_image_sq_ad_1_reg_839 <= tmp_31_cast_fu_505_p1(15 - 1 downto 0);
                integral_image_sq_ad_2_reg_844 <= tmp_32_cast_fu_516_p1(15 - 1 downto 0);
                integral_image_sq_ad_reg_834 <= col_cast_fu_490_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then
                factor_1_reg_895 <= factor_1_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                loc_V_1_reg_908 <= loc_V_1_fu_576_p1;
                loc_V_2_reg_913 <= p_Val2_4_fu_580_p1(30 downto 23);
                loc_V_3_reg_919 <= loc_V_3_fu_594_p1;
                loc_V_reg_902 <= p_Val2_s_fu_562_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                row_2_reg_815 <= row_2_fu_442_p2;
                    tmp_17_reg_807(15 downto 5) <= tmp_17_fu_426_p2(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((exitcond1_fu_436_p2 = ap_const_lv1_0)))) then
                tmp_1_reg_829 <= tmp_1_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (exitcond1_fu_436_p2 = ap_const_lv1_0))) then
                    tmp_27_reg_824(15 downto 5) <= tmp_27_fu_484_p2(15 downto 5);
                tmp_3_reg_820 <= tmp_3_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then
                tmp_2_reg_890 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    tmp_17_reg_807(4 downto 0) <= "00000";
    tmp_27_reg_824(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_436_p2, grp_cascade_classifier_fu_282_ap_done, grp_downscale_fu_346_ap_done, exitcond_fu_523_p2, tmp_9_fu_391_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_9_fu_391_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = grp_downscale_fu_346_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((exitcond1_fu_436_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond_fu_523_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_logic_0 = grp_cascade_classifier_fu_282_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accum_1_fu_543_p2 <= std_logic_vector(unsigned(tmp_5_fu_535_p1) + unsigned(accum_reg_258));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_9_fu_391_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_9_fu_391_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_9_fu_391_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_9_fu_391_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_2_fu_529_p2 <= std_logic_vector(unsigned(col_reg_247) + unsigned(ap_const_lv15_1));
    col_cast_cast_fu_496_p1 <= std_logic_vector(resize(unsigned(col_reg_247),16));
    col_cast_fu_490_p1 <= std_logic_vector(resize(unsigned(col_reg_247),32));
    exitcond1_fu_436_p2 <= "1" when (row_reg_236 = curr_height_reg_224) else "0";
    exitcond_fu_523_p2 <= "1" when (col_cast_fu_490_p1 = curr_width_reg_212) else "0";
    grp_cascade_classifier_fu_282_ap_start <= ap_reg_grp_cascade_classifier_fu_282_ap_start;
    grp_downscale_fu_346_ap_start <= ap_reg_grp_downscale_fu_346_ap_start;

    grp_fu_374_ce_assign_proc : process(ap_CS_fsm_state12, grp_cascade_classifier_fu_282_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12) or ((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_logic_0 = grp_cascade_classifier_fu_282_ap_done))) or (ap_const_lv1_1 = ap_CS_fsm_state9) or (ap_const_lv1_1 = ap_CS_fsm_state10) or (ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            grp_fu_374_ce <= ap_const_logic_1;
        else 
            grp_fu_374_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_796_p0 <= tmp_16_cast_fu_539_p1(8 - 1 downto 0);
    grp_fu_796_p1 <= tmp_16_cast_fu_539_p1(8 - 1 downto 0);

    image_address0_assign_proc : process(ap_CS_fsm_state5, grp_downscale_fu_346_dest_address0, ap_CS_fsm_state3, tmp_32_cast_fu_516_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            image_address0 <= tmp_32_cast_fu_516_p1(15 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            image_address0 <= grp_downscale_fu_346_dest_address0;
        else 
            image_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_ce0_assign_proc : process(ap_CS_fsm_state5, grp_downscale_fu_346_dest_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            image_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            image_ce0 <= grp_downscale_fu_346_dest_ce0;
        else 
            image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_we0_assign_proc : process(grp_downscale_fu_346_dest_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            image_we0 <= grp_downscale_fu_346_dest_we0;
        else 
            image_we0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_address0_assign_proc : process(tmp_3_reg_820, integral_image_addr_reg_854, integral_image_addr_1_reg_859, integral_image_addr_2_reg_864, ap_CS_fsm_state6, grp_cascade_classifier_fu_282_integral_image_address0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            integral_image_address0 <= integral_image_addr_2_reg_864;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((tmp_3_reg_820 = ap_const_lv1_0)))) then 
            integral_image_address0 <= integral_image_addr_reg_854;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and (tmp_3_reg_820 = ap_const_lv1_0))) then 
            integral_image_address0 <= integral_image_addr_1_reg_859;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_address0 <= grp_cascade_classifier_fu_282_integral_image_address0;
        else 
            integral_image_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_ce0_assign_proc : process(tmp_3_reg_820, ap_CS_fsm_state6, grp_cascade_classifier_fu_282_integral_image_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7)) or ((ap_const_lv1_1 = ap_CS_fsm_state6) and (tmp_3_reg_820 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state6) and not((tmp_3_reg_820 = ap_const_lv1_0))))) then 
            integral_image_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_ce0 <= grp_cascade_classifier_fu_282_integral_image_ce0;
        else 
            integral_image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_ce1_assign_proc : process(grp_cascade_classifier_fu_282_integral_image_ce1, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_ce1 <= grp_cascade_classifier_fu_282_integral_image_ce1;
        else 
            integral_image_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_d0_assign_proc : process(tmp_3_reg_820, accum_1_fu_543_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_7_fu_550_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            integral_image_d0 <= tmp_7_fu_550_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((tmp_3_reg_820 = ap_const_lv1_0)))) then 
            integral_image_d0 <= accum_1_fu_543_p2;
        else 
            integral_image_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_sq_address0_assign_proc : process(tmp_3_reg_820, integral_image_sq_ad_reg_834, integral_image_sq_ad_1_reg_839, integral_image_sq_ad_2_reg_844, ap_CS_fsm_state6, grp_cascade_classifier_fu_282_integral_image_sq_address0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_3_reg_820 = ap_const_lv1_0)))) then 
            integral_image_sq_address0 <= integral_image_sq_ad_reg_834;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_3_reg_820 = ap_const_lv1_0))) then 
            integral_image_sq_address0 <= integral_image_sq_ad_2_reg_844;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            integral_image_sq_address0 <= integral_image_sq_ad_1_reg_839;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_sq_address0 <= grp_cascade_classifier_fu_282_integral_image_sq_address0;
        else 
            integral_image_sq_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_sq_ce0_assign_proc : process(tmp_3_reg_820, ap_CS_fsm_state6, grp_cascade_classifier_fu_282_integral_image_sq_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_3_reg_820 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_3_reg_820 = ap_const_lv1_0))))) then 
            integral_image_sq_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_sq_ce0 <= grp_cascade_classifier_fu_282_integral_image_sq_ce0;
        else 
            integral_image_sq_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_sq_ce1_assign_proc : process(grp_cascade_classifier_fu_282_integral_image_sq_ce1, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            integral_image_sq_ce1 <= grp_cascade_classifier_fu_282_integral_image_sq_ce1;
        else 
            integral_image_sq_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_sq_d0_assign_proc : process(tmp_3_reg_820, accum_sq_1_reg_883, ap_CS_fsm_state7, tmp_8_fu_556_p2)
    begin
        if ((ap_const_lv1_1 = ap_CS_fsm_state7)) then
            if (not((tmp_3_reg_820 = ap_const_lv1_0))) then 
                integral_image_sq_d0 <= accum_sq_1_reg_883;
            elsif ((tmp_3_reg_820 = ap_const_lv1_0)) then 
                integral_image_sq_d0 <= tmp_8_fu_556_p2;
            else 
                integral_image_sq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            integral_image_sq_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    integral_image_sq_we0_assign_proc : process(tmp_3_reg_820, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_3_reg_820 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not((tmp_3_reg_820 = ap_const_lv1_0))))) then 
            integral_image_sq_we0 <= ap_const_logic_1;
        else 
            integral_image_sq_we0 <= ap_const_logic_0;
        end if; 
    end process;


    integral_image_we0_assign_proc : process(tmp_3_reg_820, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6) and not((tmp_3_reg_820 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and (tmp_3_reg_820 = ap_const_lv1_0)))) then 
            integral_image_we0 <= ap_const_logic_1;
        else 
            integral_image_we0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_1_fu_717_p3 <= sh_assign_2_fu_711_p2(8 downto 8);
    isNeg_fu_618_p3 <= sh_assign_fu_612_p2(8 downto 8);
    loc_V_1_fu_576_p1 <= p_Val2_s_fu_562_p1(23 - 1 downto 0);
    loc_V_3_fu_594_p1 <= p_Val2_4_fu_580_p1(23 - 1 downto 0);
    orig_image_address0 <= grp_downscale_fu_346_src_address0;
    orig_image_ce0 <= grp_downscale_fu_346_src_ce0;
    p_Result_4_fu_697_p3 <= (ap_const_lv1_1 & loc_V_3_reg_919);
    p_Result_s_fu_598_p3 <= (ap_const_lv1_1 & loc_V_1_reg_908);
    p_Val2_4_fu_580_p1 <= grp_fu_362_p2;
    p_Val2_s_fu_562_p1 <= grp_fu_357_p2;
    p_shl1_cast_fu_418_p3 <= (tmp_20_fu_414_p1 & ap_const_lv5_0);
    p_shl2_cast_fu_468_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_460_p3),16));
    p_shl3_cast_fu_480_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_472_p3),16));
    p_shl_cast_fu_406_p3 <= (tmp_18_fu_402_p1 & ap_const_lv7_0);
    result_V_1_fu_788_p3 <= 
        tmp_22_fu_774_p1 when (isNeg_1_fu_717_p3(0) = '1') else 
        tmp_24_fu_778_p4;
    result_V_fu_689_p3 <= 
        tmp_19_fu_675_p1 when (isNeg_fu_618_p3(0) = '1') else 
        tmp_21_fu_679_p4;
    row_2_fu_442_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(row_reg_236));
        sh_assign_1_cast_cas_fu_647_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_635_p3),24));

        sh_assign_1_cast_fu_643_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_635_p3),32));

    sh_assign_1_fu_635_p3 <= 
        tmp_4_i_i_cast_fu_631_p1 when (isNeg_fu_618_p3(0) = '1') else 
        sh_assign_fu_612_p2;
    sh_assign_2_fu_711_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i6_cast1_fu_708_p1));
        sh_assign_3_cast_cas_fu_746_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_734_p3),24));

        sh_assign_3_cast_fu_742_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_734_p3),32));

    sh_assign_3_fu_734_p3 <= 
        tmp_4_i_i9_cast_fu_730_p1 when (isNeg_1_fu_717_p3(0) = '1') else 
        sh_assign_2_fu_711_p2;
    sh_assign_fu_612_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast2_fu_609_p1));
    success <= alr_found;

    success_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_9_fu_391_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_9_fu_391_p2))) then 
            success_ap_vld <= ap_const_logic_1;
        else 
            success_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_16_cast_fu_539_p1 <= std_logic_vector(resize(unsigned(image_q0),16));
    tmp_17_fu_426_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_418_p3) + unsigned(p_shl_cast_fu_406_p3));
    tmp_18_fu_402_p1 <= row_reg_236(9 - 1 downto 0);
    tmp_19_fu_675_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_667_p3),32));
    tmp_20_fu_414_p1 <= row_reg_236(11 - 1 downto 0);
    tmp_21_fu_679_p4 <= tmp_9_i_i_fu_661_p2(54 downto 23);
    tmp_22_fu_774_p1 <= std_logic_vector(resize(unsigned(tmp_36_fu_766_p3),32));
    tmp_23_fu_432_p1 <= row_reg_236(8 - 1 downto 0);
    tmp_24_fu_778_p4 <= tmp_9_i_i1_fu_760_p2(54 downto 23);
    tmp_25_fu_460_p3 <= (tmp_4_fu_454_p2 & ap_const_lv7_0);
    tmp_26_fu_472_p3 <= (tmp_4_fu_454_p2 & ap_const_lv5_0);
    tmp_27_fu_484_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_480_p1) + unsigned(p_shl2_cast_fu_468_p1));
    tmp_28_fu_500_p2 <= std_logic_vector(unsigned(tmp_27_reg_824) + unsigned(col_cast_cast_fu_496_p1));
    tmp_29_fu_511_p2 <= std_logic_vector(unsigned(tmp_17_reg_807) + unsigned(col_cast_cast_fu_496_p1));
    tmp_2_i_i5_fu_704_p1 <= std_logic_vector(resize(unsigned(p_Result_4_fu_697_p3),78));
    tmp_2_i_i_fu_605_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_598_p3),78));
    tmp_31_cast_fu_505_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_500_p2),32));
    tmp_32_cast_fu_516_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_511_p2),32));
    tmp_33_fu_667_p3 <= tmp_7_i_i_fu_655_p2(23 downto 23);
    tmp_36_fu_766_p3 <= tmp_7_i_i1_fu_754_p2(23 downto 23);
    tmp_3_fu_448_p2 <= "1" when (row_reg_236 = ap_const_lv32_0) else "0";
    tmp_4_fu_454_p2 <= std_logic_vector(unsigned(tmp_23_fu_432_p1) + unsigned(ap_const_lv8_FF));
        tmp_4_i_i9_cast_fu_730_p1 <= std_logic_vector(resize(signed(tmp_4_i_i9_fu_725_p2),9));

    tmp_4_i_i9_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_reg_913));
        tmp_4_i_i_cast_fu_631_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_fu_626_p2),9));

    tmp_4_i_i_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_902));
    tmp_5_fu_535_p1 <= std_logic_vector(resize(unsigned(image_q0),32));
    tmp_6_i_i1_fu_750_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_742_p1),78));
    tmp_6_i_i_fu_651_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_643_p1),78));
    tmp_7_fu_550_p2 <= std_logic_vector(unsigned(integral_image_q0) + unsigned(accum_1_reg_877));
    tmp_7_i_i1_fu_754_p2 <= std_logic_vector(shift_right(unsigned(p_Result_4_fu_697_p3),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_746_p1(24-1 downto 0)))));
    tmp_7_i_i_fu_655_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_598_p3),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_647_p1(24-1 downto 0)))));
    tmp_8_fu_556_p2 <= std_logic_vector(unsigned(integral_image_sq_q0) + unsigned(accum_sq_1_reg_883));
    tmp_9_fu_391_p2 <= (tmp_fu_379_p2 and tmp_s_fu_385_p2);
    tmp_9_i_i1_fu_760_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i5_fu_704_p1),to_integer(unsigned('0' & tmp_6_i_i1_fu_750_p1(31-1 downto 0)))));
    tmp_9_i_i_fu_661_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_fu_605_p1),to_integer(unsigned('0' & tmp_6_i_i_fu_651_p1(31-1 downto 0)))));
    tmp_fu_379_p2 <= "1" when (unsigned(curr_height_reg_224) > unsigned(ap_const_lv32_17)) else "0";
    tmp_i_i_i6_cast1_fu_708_p1 <= std_logic_vector(resize(unsigned(loc_V_2_reg_913),9));
    tmp_i_i_i_cast2_fu_609_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_902),9));
    tmp_s_fu_385_p2 <= "1" when (unsigned(curr_width_reg_212) > unsigned(ap_const_lv32_17)) else "0";
end behav;
