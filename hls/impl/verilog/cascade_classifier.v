// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cascade_classifier (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        integral_image_address0,
        integral_image_ce0,
        integral_image_q0,
        integral_image_address1,
        integral_image_ce1,
        integral_image_q1,
        integral_image_sq_address0,
        integral_image_sq_ce0,
        integral_image_sq_q0,
        integral_image_sq_address1,
        integral_image_sq_ce1,
        integral_image_sq_q1,
        height,
        width,
        factor,
        alr_found_i,
        alr_found_o,
        alr_found_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 65'b1;
parameter    ap_ST_fsm_state2 = 65'b10;
parameter    ap_ST_fsm_state3 = 65'b100;
parameter    ap_ST_fsm_state4 = 65'b1000;
parameter    ap_ST_fsm_state5 = 65'b10000;
parameter    ap_ST_fsm_state6 = 65'b100000;
parameter    ap_ST_fsm_state7 = 65'b1000000;
parameter    ap_ST_fsm_state8 = 65'b10000000;
parameter    ap_ST_fsm_state9 = 65'b100000000;
parameter    ap_ST_fsm_state10 = 65'b1000000000;
parameter    ap_ST_fsm_state11 = 65'b10000000000;
parameter    ap_ST_fsm_state12 = 65'b100000000000;
parameter    ap_ST_fsm_state13 = 65'b1000000000000;
parameter    ap_ST_fsm_state14 = 65'b10000000000000;
parameter    ap_ST_fsm_state15 = 65'b100000000000000;
parameter    ap_ST_fsm_state16 = 65'b1000000000000000;
parameter    ap_ST_fsm_state17 = 65'b10000000000000000;
parameter    ap_ST_fsm_state18 = 65'b100000000000000000;
parameter    ap_ST_fsm_state19 = 65'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 65'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 65'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 65'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 65'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 65'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 65'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 65'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 65'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 65'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 65'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 65'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 65'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 65'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 65'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 65'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 65'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 65'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 65'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 65'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 65'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 65'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 65'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 65'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 65'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 65'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 65'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 65'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 65'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 65'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 65'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 65'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 65'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 65'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 65'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 65'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 65'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 65'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 65'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 65'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 65'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 65'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 65'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 65'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 65'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 65'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 65'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv21_0 = 21'b000000000000000000000;
parameter    ap_const_lv32_41C00000 = 32'b1000001110000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_FFFFFFE8 = 32'b11111111111111111111111111101000;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv8_18 = 8'b11000;
parameter    ap_const_lv9_18 = 9'b11000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv5_19 = 5'b11001;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv13_1 = 13'b1;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] integral_image_address0;
output   integral_image_ce0;
input  [31:0] integral_image_q0;
output  [14:0] integral_image_address1;
output   integral_image_ce1;
input  [31:0] integral_image_q1;
output  [14:0] integral_image_sq_address0;
output   integral_image_sq_ce0;
input  [31:0] integral_image_sq_q0;
output  [14:0] integral_image_sq_address1;
output   integral_image_sq_ce1;
input  [31:0] integral_image_sq_q1;
input  [31:0] height;
input  [31:0] width;
input  [31:0] factor;
input  [31:0] alr_found_i;
output  [31:0] alr_found_o;
output   alr_found_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] integral_image_address0;
reg integral_image_ce0;
reg[14:0] integral_image_address1;
reg integral_image_ce1;
reg[14:0] integral_image_sq_address0;
reg integral_image_sq_ce0;
reg[14:0] integral_image_sq_address1;
reg integral_image_sq_ce1;
reg[31:0] alr_found_o;
reg alr_found_o_ap_vld;

(* fsm_encoding = "none" *) reg   [64:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [4:0] STAGES_feature_count_address0;
reg    STAGES_feature_count_ce0;
wire   [7:0] STAGES_feature_count_q0;
wire   [4:0] STAGES_threshold_address0;
reg    STAGES_threshold_ce0;
wire   [10:0] STAGES_threshold_q0;
wire   [11:0] FEATURES_rect1_x_address0;
reg    FEATURES_rect1_x_ce0;
wire   [4:0] FEATURES_rect1_x_q0;
wire   [11:0] FEATURES_rect1_y_address0;
reg    FEATURES_rect1_y_ce0;
wire   [4:0] FEATURES_rect1_y_q0;
wire   [11:0] FEATURES_rect1_width_address0;
reg    FEATURES_rect1_width_ce0;
wire   [4:0] FEATURES_rect1_width_q0;
wire   [11:0] FEATURES_rect1_heigh_address0;
reg    FEATURES_rect1_heigh_ce0;
wire   [4:0] FEATURES_rect1_heigh_q0;
wire   [11:0] FEATURES_rect1_weigh_address0;
reg    FEATURES_rect1_weigh_ce0;
wire   [7:0] FEATURES_rect1_weigh_q0;
wire   [11:0] FEATURES_rect2_x_address0;
reg    FEATURES_rect2_x_ce0;
wire   [4:0] FEATURES_rect2_x_q0;
wire   [11:0] FEATURES_rect2_y_address0;
reg    FEATURES_rect2_y_ce0;
wire   [4:0] FEATURES_rect2_y_q0;
wire   [11:0] FEATURES_rect2_width_address0;
reg    FEATURES_rect2_width_ce0;
wire   [4:0] FEATURES_rect2_width_q0;
wire   [11:0] FEATURES_rect2_heigh_address0;
reg    FEATURES_rect2_heigh_ce0;
wire   [4:0] FEATURES_rect2_heigh_q0;
wire   [11:0] FEATURES_rect2_weigh_address0;
reg    FEATURES_rect2_weigh_ce0;
wire   [8:0] FEATURES_rect2_weigh_q0;
wire   [11:0] FEATURES_rect3_x_address0;
reg    FEATURES_rect3_x_ce0;
wire   [4:0] FEATURES_rect3_x_q0;
wire   [11:0] FEATURES_rect3_y_address0;
reg    FEATURES_rect3_y_ce0;
wire   [4:0] FEATURES_rect3_y_q0;
wire   [11:0] FEATURES_rect3_width_address0;
reg    FEATURES_rect3_width_ce0;
wire   [3:0] FEATURES_rect3_width_q0;
wire   [11:0] FEATURES_rect3_heigh_address0;
reg    FEATURES_rect3_heigh_ce0;
wire   [3:0] FEATURES_rect3_heigh_q0;
wire   [11:0] FEATURES_rect3_weigh_address0;
reg    FEATURES_rect3_weigh_ce0;
wire   [8:0] FEATURES_rect3_weigh_q0;
wire   [11:0] FEATURES_below_address0;
reg    FEATURES_below_ce0;
wire   [12:0] FEATURES_below_q0;
wire   [11:0] FEATURES_above_address0;
reg    FEATURES_above_ce0;
wire   [12:0] FEATURES_above_q0;
wire   [11:0] FEATURES_threshold_address0;
reg    FEATURES_threshold_ce0;
wire   [7:0] FEATURES_threshold_q0;
reg   [31:0] best_accum;
wire   [31:0] grp_fu_693_p1;
reg   [31:0] reg_740;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state54;
wire   [0:0] ap_CS_fsm_state60;
wire   [31:0] grp_fu_709_p2;
reg   [31:0] reg_746;
wire   [0:0] ap_CS_fsm_state45;
wire   [0:0] ap_CS_fsm_state47;
wire   [0:0] ap_CS_fsm_state49;
wire   [31:0] tmp_fu_762_p2;
reg   [31:0] tmp_reg_2172;
wire   [0:0] ap_CS_fsm_state2;
wire   [31:0] tmp_s_fu_768_p2;
reg   [31:0] tmp_s_reg_2177;
wire   [31:0] grp_fu_687_p2;
wire   [15:0] tmp_30_fu_798_p2;
reg   [15:0] tmp_30_reg_2188;
wire   [0:0] ap_CS_fsm_state3;
wire   [7:0] tmp_47_fu_804_p1;
reg   [7:0] tmp_47_reg_2194;
wire   [31:0] row_fu_813_p2;
reg   [31:0] row_reg_2205;
wire   [15:0] tmp_33_fu_848_p2;
reg   [15:0] tmp_33_reg_2210;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state8;
reg   [14:0] integral_image_addr_5_reg_2227;
reg   [14:0] integral_image_sq_ad_3_reg_2237;
wire   [8:0] tmp_51_fu_884_p1;
reg   [8:0] tmp_51_reg_2242;
wire   [31:0] col_fu_893_p2;
reg   [31:0] col_reg_2252;
wire   [0:0] exitcond3_fu_888_p2;
wire   [15:0] tmp_37_fu_920_p2;
reg   [15:0] tmp_37_reg_2262;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] tmp_i_16_fu_930_p2;
reg   [31:0] tmp_i_16_reg_2282;
wire   [31:0] tmp_6_i_fu_936_p2;
reg   [31:0] tmp_6_i_reg_2287;
wire  signed [31:0] mean_fu_947_p2;
reg  signed [31:0] mean_reg_2292;
wire   [0:0] ap_CS_fsm_state10;
wire   [31:0] tmp_8_i_fu_958_p2;
reg   [31:0] tmp_8_i_reg_2298;
wire   [31:0] grp_fu_964_p2;
reg   [31:0] tmp_10_i_reg_2304;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state14;
wire   [63:0] grp_fu_701_p1;
reg   [63:0] tmp_12_i_reg_2314;
wire   [0:0] ap_CS_fsm_state17;
reg   [10:0] loc_V_reg_2319;
wire   [0:0] ap_CS_fsm_state38;
wire   [51:0] loc_V_4_fu_1004_p1;
reg   [51:0] loc_V_4_reg_2325;
wire  signed [31:0] result_V_fu_1099_p3;
reg  signed [31:0] result_V_reg_2330;
wire   [0:0] ap_CS_fsm_state39;
wire   [0:0] tmp_11_fu_1113_p2;
reg   [0:0] tmp_11_reg_2335;
wire   [0:0] ap_CS_fsm_state40;
wire   [4:0] s_1_fu_1119_p2;
reg   [4:0] s_1_reg_2339;
wire  signed [20:0] stage_threshold_cast_fu_1141_p1;
reg  signed [20:0] stage_threshold_cast_reg_2365;
wire   [0:0] ap_CS_fsm_state41;
wire   [12:0] feature_index_2_fu_1145_p2;
reg   [12:0] feature_index_2_reg_2370;
wire   [31:0] feature_index_1_cast_fu_1151_p1;
reg   [31:0] feature_index_1_cast_reg_2376;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] exitcond_fu_1156_p2;
wire   [12:0] tmp_19_fu_1161_p2;
reg   [12:0] tmp_19_reg_2405;
wire   [25:0] total_stage_accum_1_fu_1176_p2;
wire   [0:0] tmp_17_fu_1171_p2;
wire   [0:0] ap_CS_fsm_state43;
reg   [4:0] feature_rect1_y_reg_2423;
wire   [0:0] ap_CS_fsm_state44;
wire   [15:0] tmp_59_fu_1262_p2;
reg   [15:0] tmp_59_reg_2448;
wire   [15:0] tmp_65_fu_1315_p2;
reg   [15:0] tmp_65_reg_2458;
reg   [4:0] feature_rect2_y_reg_2468;
wire   [0:0] ap_CS_fsm_state46;
wire  signed [31:0] grp_fu_756_p2;
reg  signed [31:0] tmp_18_i_reg_2498;
wire   [15:0] tmp_70_fu_1409_p2;
reg   [15:0] tmp_70_reg_2508;
wire   [15:0] tmp_75_fu_1462_p2;
reg   [15:0] tmp_75_reg_2518;
wire   [7:0] tmp_15_i2_fu_1480_p2;
reg   [7:0] tmp_15_i2_reg_2548;
reg  signed [31:0] tmp_18_i1_reg_2555;
wire   [0:0] ap_CS_fsm_state48;
wire   [15:0] tmp_80_fu_1555_p2;
reg   [15:0] tmp_80_reg_2565;
wire   [15:0] tmp_85_fu_1607_p2;
reg   [15:0] tmp_85_reg_2575;
reg   [7:0] feature_rect1_weight_reg_2620;
wire   [0:0] ap_CS_fsm_state50;
reg   [8:0] feature_rect2_weight_reg_2625;
reg   [8:0] feature_rect3_weight_reg_2630;
reg   [12:0] feature_below_reg_2635;
reg   [12:0] feature_above_reg_2640;
reg   [7:0] feature_threshold_reg_2645;
reg  signed [31:0] tmp_18_i2_reg_2650;
wire   [31:0] thresh_fu_1633_p2;
reg   [31:0] thresh_reg_2655;
wire   [0:0] ap_CS_fsm_state51;
wire   [31:0] val1_fu_1638_p2;
reg   [31:0] val1_reg_2660;
wire   [31:0] val2_fu_1643_p2;
reg   [31:0] val2_reg_2665;
wire   [31:0] val3_fu_1648_p2;
reg   [31:0] val3_reg_2670;
wire   [20:0] stage_accum_1_fu_1677_p2;
wire   [0:0] ap_CS_fsm_state52;
reg   [7:0] loc_V_5_reg_2680;
wire   [0:0] ap_CS_fsm_state56;
wire   [22:0] loc_V_6_fu_1697_p1;
reg   [22:0] loc_V_6_reg_2686;
wire   [31:0] result_V_2_fu_1792_p3;
reg   [31:0] result_V_2_reg_2691;
wire   [0:0] ap_CS_fsm_state57;
wire   [31:0] grp_fu_698_p1;
reg   [31:0] start_row_assign_reg_598;
reg   [31:0] start_col_assign_reg_610;
wire   [0:0] ap_CS_fsm_state65;
reg   [12:0] feature_index_reg_622;
reg   [25:0] total_stage_accum_reg_634;
reg   [4:0] s_reg_646;
reg   [12:0] feature_index_1_reg_657;
reg   [20:0] stage_accum_reg_667;
wire   [31:0] tmp_41_cast_fu_867_p1;
wire   [31:0] tmp_42_cast_fu_878_p1;
wire   [31:0] tmp_43_cast_fu_914_p1;
wire   [31:0] tmp_44_cast_fu_925_p1;
wire   [31:0] s_cast_fu_1107_p1;
wire   [31:0] tmp_70_cast_fu_1257_p1;
wire   [31:0] tmp_75_cast_fu_1310_p1;
wire   [31:0] tmp_71_cast_fu_1321_p1;
wire   [31:0] tmp_76_cast_fu_1325_p1;
wire   [31:0] tmp_80_cast_fu_1404_p1;
wire   [31:0] tmp_85_cast_fu_1457_p1;
wire   [31:0] tmp_81_cast_fu_1472_p1;
wire   [31:0] tmp_86_cast_fu_1476_p1;
wire   [31:0] tmp_90_cast_fu_1550_p1;
wire   [31:0] tmp_95_cast_fu_1602_p1;
wire   [31:0] tmp_91_cast_fu_1613_p1;
wire   [31:0] tmp_96_cast_fu_1617_p1;
wire  signed [31:0] total_stage_accum_ca_fu_1935_p1;
wire   [0:0] tmp_15_fu_2144_p2;
wire   [0:0] tmp_16_fu_2154_p2;
reg   [31:0] grp_fu_687_p0;
reg   [31:0] grp_fu_687_p1;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state55;
reg   [31:0] grp_fu_693_p0;
wire   [0:0] ap_CS_fsm_state58;
wire   [31:0] grp_fu_701_p0;
wire   [0:0] ap_CS_fsm_state18;
wire   [31:0] grp_fu_750_p2;
wire   [8:0] tmp_45_fu_774_p1;
wire   [10:0] tmp_46_fu_786_p1;
wire   [15:0] p_shl1_cast_fu_790_p3;
wire   [15:0] p_shl_cast_fu_778_p3;
wire   [7:0] sum_i_fu_819_p2;
wire   [14:0] tmp_31_fu_824_p3;
wire   [12:0] tmp_32_fu_836_p3;
wire   [15:0] p_shl3_cast_fu_844_p1;
wire   [15:0] p_shl2_cast_fu_832_p1;
wire   [15:0] tmp_50_fu_858_p1;
wire   [15:0] tmp_34_fu_862_p2;
wire   [15:0] tmp_35_fu_873_p2;
wire   [8:0] tmp_i_fu_899_p2;
wire   [15:0] tmp_i_cast_cast_fu_905_p1;
wire   [15:0] tmp_36_fu_909_p2;
wire   [31:0] tmp_5_i_fu_942_p2;
wire   [31:0] tmp_7_i_fu_953_p2;
wire   [0:0] ap_CS_fsm_state11;
wire   [31:0] tmp_55_fu_973_p2;
wire   [31:0] tmp_54_fu_968_p2;
wire   [31:0] tmp_9_i_fu_978_p2;
wire   [63:0] grp_fu_704_p2;
wire   [63:0] p_Val2_s_fu_990_p1;
wire   [52:0] p_Result_s_fu_1008_p3;
wire   [11:0] tmp_i_i_i_i_cast7_fu_1019_p1;
wire   [11:0] sh_assign_fu_1022_p2;
wire   [10:0] tmp_i_i_i_17_fu_1036_p2;
wire   [0:0] isNeg_fu_1028_p3;
wire  signed [11:0] tmp_i_i_i_cast_fu_1041_p1;
wire   [11:0] sh_assign_4_fu_1045_p3;
wire  signed [31:0] sh_assign_4_cast_fu_1053_p1;
wire   [52:0] tmp_1_i_i_i_cast_fu_1061_p1;
wire   [135:0] tmp_i_i_i_fu_1015_p1;
wire   [135:0] tmp_1_i_i_i_fu_1057_p1;
wire   [52:0] tmp_2_i_i_i_fu_1065_p2;
wire   [0:0] tmp_62_fu_1077_p3;
wire   [135:0] tmp_3_i_i_i_fu_1071_p2;
wire   [31:0] tmp_38_fu_1085_p1;
wire   [31:0] tmp_39_fu_1089_p4;
wire   [12:0] stage_feature_count_s_fu_1137_p1;
wire  signed [25:0] stage_accum_cast_cas_fu_1167_p1;
wire   [8:0] feature_rect1_x_cast_fu_1182_p1;
wire   [8:0] tmp_i1_fu_1197_p2;
wire   [8:0] feature_rect1_width_s_fu_1189_p1;
wire   [8:0] tmp_i1_19_fu_1206_p2;
wire   [7:0] feature_rect1_y_cast_fu_1186_p1;
wire   [7:0] tmp_15_i_fu_1216_p2;
wire   [14:0] tmp_53_fu_1221_p3;
wire   [12:0] tmp_56_fu_1233_p3;
wire   [15:0] p_shl15_cast_fu_1241_p1;
wire   [15:0] p_shl14_cast_fu_1229_p1;
wire   [15:0] tmp_57_fu_1245_p2;
wire   [15:0] tmp_i1_cast_cast_fu_1202_p1;
wire   [15:0] tmp_58_fu_1251_p2;
wire   [15:0] tmp_i1_cast_cast_20_fu_1212_p1;
wire   [7:0] feature_rect1_height_1_fu_1193_p1;
wire   [7:0] sum_i1_fu_1268_p2;
wire   [14:0] tmp_60_fu_1274_p3;
wire   [12:0] tmp_61_fu_1286_p3;
wire   [15:0] p_shl13_cast_fu_1294_p1;
wire   [15:0] p_shl12_cast_fu_1282_p1;
wire   [15:0] tmp_63_fu_1298_p2;
wire   [15:0] tmp_64_fu_1304_p2;
wire   [8:0] feature_rect2_x_cast_fu_1329_p1;
wire   [8:0] tmp_i2_fu_1344_p2;
wire   [8:0] feature_rect2_width_s_fu_1336_p1;
wire   [8:0] tmp_i2_21_fu_1353_p2;
wire   [7:0] feature_rect2_y_cast_fu_1333_p1;
wire   [7:0] tmp_15_i1_fu_1363_p2;
wire   [14:0] tmp_66_fu_1368_p3;
wire   [12:0] tmp_67_fu_1380_p3;
wire   [15:0] p_shl11_cast_fu_1388_p1;
wire   [15:0] p_shl10_cast_fu_1376_p1;
wire   [15:0] tmp_68_fu_1392_p2;
wire   [15:0] tmp_i2_cast_cast_fu_1349_p1;
wire   [15:0] tmp_69_fu_1398_p2;
wire   [15:0] tmp_i2_cast_cast_22_fu_1359_p1;
wire   [7:0] feature_rect2_height_1_fu_1340_p1;
wire   [7:0] sum_i2_fu_1415_p2;
wire   [14:0] tmp_71_fu_1421_p3;
wire   [12:0] tmp_72_fu_1433_p3;
wire   [15:0] p_shl9_cast_fu_1441_p1;
wire   [15:0] p_shl8_cast_fu_1429_p1;
wire   [15:0] tmp_73_fu_1445_p2;
wire   [15:0] tmp_74_fu_1451_p2;
wire   [7:0] feature_rect3_y_cast_fu_1468_p1;
wire   [8:0] feature_rect3_x_cast_fu_1485_p1;
wire   [8:0] tmp_i3_fu_1497_p2;
wire   [8:0] feature_rect3_width_s_fu_1489_p1;
wire   [8:0] tmp_i3_23_fu_1506_p2;
wire   [14:0] tmp_76_fu_1516_p3;
wire   [12:0] tmp_77_fu_1527_p3;
wire   [15:0] p_shl7_cast_fu_1534_p1;
wire   [15:0] p_shl6_cast_fu_1523_p1;
wire   [15:0] tmp_78_fu_1538_p2;
wire   [15:0] tmp_i3_cast_cast_fu_1502_p1;
wire   [15:0] tmp_79_fu_1544_p2;
wire   [15:0] tmp_i3_cast_cast_24_fu_1512_p1;
wire   [7:0] feature_rect3_height_1_fu_1493_p1;
wire   [7:0] sum_i3_fu_1561_p2;
wire   [14:0] tmp_81_fu_1566_p3;
wire   [12:0] tmp_82_fu_1578_p3;
wire   [15:0] p_shl5_cast_fu_1586_p1;
wire   [15:0] p_shl4_cast_fu_1574_p1;
wire   [15:0] tmp_83_fu_1590_p2;
wire   [15:0] tmp_84_fu_1596_p2;
wire  signed [7:0] thresh_fu_1633_p1;
wire  signed [7:0] val1_fu_1638_p1;
wire   [8:0] val2_fu_1643_p1;
wire   [8:0] val3_fu_1648_p1;
wire   [31:0] tmp1_fu_1653_p2;
wire   [31:0] total_val_fu_1657_p2;
wire   [0:0] tmp_18_fu_1662_p2;
wire   [12:0] feature_below_2_fu_1667_p3;
wire  signed [20:0] feature_below_2_cast_fu_1673_p1;
wire   [31:0] p_Val2_11_fu_1683_p1;
wire   [23:0] p_Result_8_fu_1701_p3;
wire   [8:0] tmp_i_i_i1_cast5_fu_1712_p1;
wire   [8:0] sh_assign_5_fu_1715_p2;
wire   [7:0] tmp_4_i_i_fu_1729_p2;
wire   [0:0] isNeg_2_fu_1721_p3;
wire  signed [8:0] tmp_4_i_i_cast_fu_1734_p1;
wire   [8:0] sh_assign_6_fu_1738_p3;
wire  signed [31:0] sh_assign_6_cast_fu_1746_p1;
wire  signed [23:0] sh_assign_6_cast_cas_fu_1750_p1;
wire   [77:0] tmp_2_i_i_fu_1708_p1;
wire   [77:0] tmp_6_i_i_fu_1754_p1;
wire   [23:0] tmp_7_i_i_fu_1758_p2;
wire   [0:0] tmp_97_fu_1770_p3;
wire   [77:0] tmp_9_i_i_fu_1764_p2;
wire   [31:0] tmp_40_fu_1778_p1;
wire   [31:0] tmp_41_fu_1782_p4;
wire   [31:0] grp_fu_679_p2;
wire   [31:0] grp_fu_683_p2;
wire   [0:0] exitcond4_fu_808_p2;
reg   [64:0] ap_NS_fsm;
wire   [31:0] val2_fu_1643_p10;
wire   [31:0] val3_fu_1648_p10;
wire   [31:0] grp_fu_679_p0;
wire   [31:0] grp_fu_679_p1;
wire   [31:0] grp_fu_683_p0;
wire   [31:0] grp_fu_683_p1;
wire   [31:0] grp_fu_698_p0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 65'b1;
#0 best_accum = 32'b00000000000000000000000000000000;
end

cascade_classifieeOg #(
    .DataWidth( 8 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
STAGES_feature_count_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(STAGES_feature_count_address0),
    .ce0(STAGES_feature_count_ce0),
    .q0(STAGES_feature_count_q0)
);

cascade_classifiefYi #(
    .DataWidth( 11 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
STAGES_threshold_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(STAGES_threshold_address0),
    .ce0(STAGES_threshold_ce0),
    .q0(STAGES_threshold_q0)
);

cascade_classifieg8j #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect1_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect1_x_address0),
    .ce0(FEATURES_rect1_x_ce0),
    .q0(FEATURES_rect1_x_q0)
);

cascade_classifiehbi #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect1_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect1_y_address0),
    .ce0(FEATURES_rect1_y_ce0),
    .q0(FEATURES_rect1_y_q0)
);

cascade_classifieibs #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect1_width_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect1_width_address0),
    .ce0(FEATURES_rect1_width_ce0),
    .q0(FEATURES_rect1_width_q0)
);

cascade_classifiejbC #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect1_heigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect1_heigh_address0),
    .ce0(FEATURES_rect1_heigh_ce0),
    .q0(FEATURES_rect1_heigh_q0)
);

cascade_classifiekbM #(
    .DataWidth( 8 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect1_weigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect1_weigh_address0),
    .ce0(FEATURES_rect1_weigh_ce0),
    .q0(FEATURES_rect1_weigh_q0)
);

cascade_classifielbW #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect2_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect2_x_address0),
    .ce0(FEATURES_rect2_x_ce0),
    .q0(FEATURES_rect2_x_q0)
);

cascade_classifiemb6 #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect2_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect2_y_address0),
    .ce0(FEATURES_rect2_y_ce0),
    .q0(FEATURES_rect2_y_q0)
);

cascade_classifiencg #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect2_width_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect2_width_address0),
    .ce0(FEATURES_rect2_width_ce0),
    .q0(FEATURES_rect2_width_q0)
);

cascade_classifieocq #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect2_heigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect2_heigh_address0),
    .ce0(FEATURES_rect2_heigh_ce0),
    .q0(FEATURES_rect2_heigh_q0)
);

cascade_classifiepcA #(
    .DataWidth( 9 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect2_weigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect2_weigh_address0),
    .ce0(FEATURES_rect2_weigh_ce0),
    .q0(FEATURES_rect2_weigh_q0)
);

cascade_classifieqcK #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect3_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect3_x_address0),
    .ce0(FEATURES_rect3_x_ce0),
    .q0(FEATURES_rect3_x_q0)
);

cascade_classifiercU #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect3_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect3_y_address0),
    .ce0(FEATURES_rect3_y_ce0),
    .q0(FEATURES_rect3_y_q0)
);

cascade_classifiesc4 #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect3_width_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect3_width_address0),
    .ce0(FEATURES_rect3_width_ce0),
    .q0(FEATURES_rect3_width_q0)
);

cascade_classifietde #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect3_heigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect3_heigh_address0),
    .ce0(FEATURES_rect3_heigh_ce0),
    .q0(FEATURES_rect3_heigh_q0)
);

cascade_classifieudo #(
    .DataWidth( 9 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_rect3_weigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_rect3_weigh_address0),
    .ce0(FEATURES_rect3_weigh_ce0),
    .q0(FEATURES_rect3_weigh_q0)
);

cascade_classifievdy #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_below_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_below_address0),
    .ce0(FEATURES_below_ce0),
    .q0(FEATURES_below_q0)
);

cascade_classifiewdI #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_above_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_above_address0),
    .ce0(FEATURES_above_ce0),
    .q0(FEATURES_above_q0)
);

cascade_classifiexdS #(
    .DataWidth( 8 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
FEATURES_threshold_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(FEATURES_threshold_address0),
    .ce0(FEATURES_threshold_ce0),
    .q0(FEATURES_threshold_q0)
);

detect_face_fmul_zec #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_face_fmul_zec_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_687_p0),
    .din1(grp_fu_687_p1),
    .ce(1'b1),
    .dout(grp_fu_687_p2)
);

detect_face_uitofAem #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_face_uitofAem_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_693_p0),
    .ce(1'b1),
    .dout(grp_fu_693_p1)
);

detect_face_uitodBew #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
detect_face_uitodBew_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_701_p0),
    .ce(1'b1),
    .dout(grp_fu_701_p1)
);

detect_face_dsqrtCeG #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
detect_face_dsqrtCeG_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv64_0),
    .din1(tmp_12_i_reg_2314),
    .ce(1'b1),
    .dout(grp_fu_704_p2)
);

detect_face_mul_3DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
detect_face_mul_3DeQ_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_reg_2292),
    .din1(mean_reg_2292),
    .ce(1'b1),
    .dout(grp_fu_964_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        feature_index_1_reg_657 <= tmp_19_reg_2405;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        feature_index_1_reg_657 <= feature_index_reg_622;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & ~(1'b0 == exitcond_fu_1156_p2) & (1'b0 == tmp_17_fu_1171_p2))) begin
        feature_index_reg_622 <= feature_index_2_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        feature_index_reg_622 <= ap_const_lv13_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & ~(1'b0 == exitcond_fu_1156_p2) & (1'b0 == tmp_17_fu_1171_p2))) begin
        s_reg_646 <= s_1_reg_2339;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        s_reg_646 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        stage_accum_reg_667 <= stage_accum_1_fu_1677_p2;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        stage_accum_reg_667 <= ap_const_lv21_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        start_col_assign_reg_610 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        start_col_assign_reg_610 <= col_reg_2252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(exitcond3_fu_888_p2 == 1'b0))) begin
        start_row_assign_reg_598 <= row_reg_2205;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        start_row_assign_reg_598 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & ~(1'b0 == exitcond_fu_1156_p2) & (1'b0 == tmp_17_fu_1171_p2))) begin
        total_stage_accum_reg_634 <= total_stage_accum_1_fu_1176_p2;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        total_stage_accum_reg_634 <= ap_const_lv26_0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (1'b0 == tmp_11_reg_2335) & (1'b0 == tmp_15_fu_2144_p2) & ~(1'b0 == tmp_16_fu_2154_p2)) | ((1'b1 == ap_CS_fsm_state65) & (1'b0 == tmp_11_reg_2335) & ~(1'b0 == tmp_15_fu_2144_p2)))) begin
        best_accum <= total_stage_accum_ca_fu_1935_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_reg_2252 <= col_fu_893_p2;
        integral_image_addr_5_reg_2227 <= tmp_42_cast_fu_878_p1;
        integral_image_sq_ad_3_reg_2237 <= tmp_42_cast_fu_878_p1;
        tmp_51_reg_2242 <= tmp_51_fu_884_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        feature_above_reg_2640 <= FEATURES_above_q0;
        feature_below_reg_2635 <= FEATURES_below_q0;
        feature_rect1_weight_reg_2620 <= FEATURES_rect1_weigh_q0;
        feature_rect2_weight_reg_2625 <= FEATURES_rect2_weigh_q0;
        feature_rect3_weight_reg_2630 <= FEATURES_rect3_weigh_q0;
        feature_threshold_reg_2645 <= FEATURES_threshold_q0;
        tmp_18_i2_reg_2650 <= grp_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        feature_index_1_cast_reg_2376[12 : 0] <= feature_index_1_cast_fu_1151_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        feature_index_2_reg_2370 <= feature_index_2_fu_1145_p2;
        stage_threshold_cast_reg_2365 <= stage_threshold_cast_fu_1141_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        feature_rect1_y_reg_2423 <= FEATURES_rect1_y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        feature_rect2_y_reg_2468 <= FEATURES_rect2_y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        loc_V_4_reg_2325 <= loc_V_4_fu_1004_p1;
        loc_V_reg_2319 <= {{p_Val2_s_fu_990_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        loc_V_5_reg_2680 <= {{p_Val2_11_fu_1683_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
        loc_V_6_reg_2686 <= loc_V_6_fu_1697_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mean_reg_2292 <= mean_fu_947_p2;
        tmp_8_i_reg_2298 <= tmp_8_i_fu_958_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state60))) begin
        reg_740 <= grp_fu_693_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state49))) begin
        reg_746 <= grp_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        result_V_2_reg_2691 <= result_V_2_fu_1792_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        result_V_reg_2330 <= result_V_fu_1099_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_2205 <= row_fu_813_p2;
        tmp_30_reg_2188[15 : 5] <= tmp_30_fu_798_p2[15 : 5];
        tmp_47_reg_2194 <= tmp_47_fu_804_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        s_1_reg_2339 <= s_1_fu_1119_p2;
        tmp_11_reg_2335 <= tmp_11_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        thresh_reg_2655 <= thresh_fu_1633_p2;
        val1_reg_2660 <= val1_fu_1638_p2;
        val2_reg_2665 <= val2_fu_1643_p2;
        val3_reg_2670 <= val3_fu_1648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_10_i_reg_2304 <= grp_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_12_i_reg_2314 <= grp_fu_701_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        tmp_15_i2_reg_2548 <= tmp_15_i2_fu_1480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_18_i1_reg_2555 <= grp_fu_756_p2;
        tmp_80_reg_2565 <= tmp_80_fu_1555_p2;
        tmp_85_reg_2575 <= tmp_85_fu_1607_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        tmp_18_i_reg_2498 <= grp_fu_756_p2;
        tmp_70_reg_2508 <= tmp_70_fu_1409_p2;
        tmp_75_reg_2518 <= tmp_75_fu_1462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (1'b0 == exitcond_fu_1156_p2))) begin
        tmp_19_reg_2405 <= tmp_19_fu_1161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_33_reg_2210[15 : 5] <= tmp_33_fu_848_p2[15 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_888_p2 == 1'b0))) begin
        tmp_37_reg_2262 <= tmp_37_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_59_reg_2448 <= tmp_59_fu_1262_p2;
        tmp_65_reg_2458 <= tmp_65_fu_1315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_6_i_reg_2287 <= tmp_6_i_fu_936_p2;
        tmp_i_16_reg_2282 <= tmp_i_16_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_reg_2172 <= tmp_fu_762_p2;
        tmp_s_reg_2177 <= tmp_s_fu_768_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_above_ce0 = 1'b1;
    end else begin
        FEATURES_above_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_below_ce0 = 1'b1;
    end else begin
        FEATURES_below_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FEATURES_rect1_heigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect1_heigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_rect1_weigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect1_weigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FEATURES_rect1_width_ce0 = 1'b1;
    end else begin
        FEATURES_rect1_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FEATURES_rect1_x_ce0 = 1'b1;
    end else begin
        FEATURES_rect1_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        FEATURES_rect1_y_ce0 = 1'b1;
    end else begin
        FEATURES_rect1_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FEATURES_rect2_heigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect2_heigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_rect2_weigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect2_weigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FEATURES_rect2_width_ce0 = 1'b1;
    end else begin
        FEATURES_rect2_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FEATURES_rect2_x_ce0 = 1'b1;
    end else begin
        FEATURES_rect2_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        FEATURES_rect2_y_ce0 = 1'b1;
    end else begin
        FEATURES_rect2_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        FEATURES_rect3_heigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect3_heigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_rect3_weigh_ce0 = 1'b1;
    end else begin
        FEATURES_rect3_weigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        FEATURES_rect3_width_ce0 = 1'b1;
    end else begin
        FEATURES_rect3_width_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        FEATURES_rect3_x_ce0 = 1'b1;
    end else begin
        FEATURES_rect3_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        FEATURES_rect3_y_ce0 = 1'b1;
    end else begin
        FEATURES_rect3_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        FEATURES_threshold_ce0 = 1'b1;
    end else begin
        FEATURES_threshold_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        STAGES_feature_count_ce0 = 1'b1;
    end else begin
        STAGES_feature_count_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        STAGES_threshold_ce0 = 1'b1;
    end else begin
        STAGES_threshold_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'b0 == tmp_11_reg_2335) & ~(1'b0 == tmp_15_fu_2144_p2))) begin
        alr_found_o = ap_const_lv32_1;
    end else begin
        alr_found_o = alr_found_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (1'b0 == tmp_11_reg_2335) & ~(1'b0 == tmp_15_fu_2144_p2))) begin
        alr_found_o_ap_vld = 1'b1;
    end else begin
        alr_found_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond4_fu_808_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond4_fu_808_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state55))) begin
        grp_fu_687_p0 = reg_740;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_687_p0 = factor;
    end else begin
        grp_fu_687_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state55))) begin
        grp_fu_687_p1 = factor;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        grp_fu_687_p1 = ap_const_lv32_41C00000;
    end else begin
        grp_fu_687_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_693_p0 = result_V_2_reg_2691;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_693_p0 = start_col_assign_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_693_p0 = start_row_assign_reg_598;
    end else begin
        grp_fu_693_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        integral_image_address0 = tmp_91_cast_fu_1613_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        integral_image_address0 = tmp_95_cast_fu_1602_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        integral_image_address0 = tmp_81_cast_fu_1472_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        integral_image_address0 = tmp_85_cast_fu_1457_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        integral_image_address0 = tmp_71_cast_fu_1321_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        integral_image_address0 = tmp_75_cast_fu_1310_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        integral_image_address0 = tmp_44_cast_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        integral_image_address0 = tmp_43_cast_fu_914_p1;
    end else begin
        integral_image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        integral_image_address1 = tmp_96_cast_fu_1617_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        integral_image_address1 = tmp_90_cast_fu_1550_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        integral_image_address1 = tmp_86_cast_fu_1476_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        integral_image_address1 = tmp_80_cast_fu_1404_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        integral_image_address1 = tmp_76_cast_fu_1325_p1;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        integral_image_address1 = tmp_70_cast_fu_1257_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        integral_image_address1 = integral_image_addr_5_reg_2227;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        integral_image_address1 = tmp_41_cast_fu_867_p1;
    end else begin
        integral_image_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        integral_image_ce0 = 1'b1;
    end else begin
        integral_image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48))) begin
        integral_image_ce1 = 1'b1;
    end else begin
        integral_image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        integral_image_sq_address0 = tmp_44_cast_fu_925_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        integral_image_sq_address0 = tmp_43_cast_fu_914_p1;
    end else begin
        integral_image_sq_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        integral_image_sq_address1 = integral_image_sq_ad_3_reg_2237;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        integral_image_sq_address1 = tmp_41_cast_fu_867_p1;
    end else begin
        integral_image_sq_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        integral_image_sq_ce0 = 1'b1;
    end else begin
        integral_image_sq_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        integral_image_sq_ce1 = 1'b1;
    end else begin
        integral_image_sq_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond4_fu_808_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (~(exitcond3_fu_888_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if ((1'b0 == tmp_11_fu_1113_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if ((~(1'b0 == exitcond_fu_1156_p2) & ~(1'b0 == tmp_17_fu_1171_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else if ((~(1'b0 == exitcond_fu_1156_p2) & (1'b0 == tmp_17_fu_1171_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FEATURES_above_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_below_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect1_heigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect1_weigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect1_width_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect1_x_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect1_y_address0 = feature_index_1_cast_fu_1151_p1;

assign FEATURES_rect2_heigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect2_weigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect2_width_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect2_x_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect2_y_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect3_heigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect3_weigh_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect3_width_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect3_x_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_rect3_y_address0 = feature_index_1_cast_reg_2376;

assign FEATURES_threshold_address0 = feature_index_1_cast_reg_2376;

assign STAGES_feature_count_address0 = s_cast_fu_1107_p1;

assign STAGES_threshold_address0 = s_cast_fu_1107_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_39];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign col_fu_893_p2 = (ap_const_lv32_1 + start_col_assign_reg_610);

assign exitcond3_fu_888_p2 = ((start_col_assign_reg_610 == tmp_reg_2172) ? 1'b1 : 1'b0);

assign exitcond4_fu_808_p2 = ((start_row_assign_reg_598 == tmp_s_reg_2177) ? 1'b1 : 1'b0);

assign exitcond_fu_1156_p2 = ((feature_index_1_reg_657 == feature_index_2_reg_2370) ? 1'b1 : 1'b0);

assign feature_below_2_cast_fu_1673_p1 = $signed(feature_below_2_fu_1667_p3);

assign feature_below_2_fu_1667_p3 = ((tmp_18_fu_1662_p2[0:0] === 1'b1) ? feature_below_reg_2635 : feature_above_reg_2640);

assign feature_index_1_cast_fu_1151_p1 = feature_index_1_reg_657;

assign feature_index_2_fu_1145_p2 = (stage_feature_count_s_fu_1137_p1 + feature_index_reg_622);

assign feature_rect1_height_1_fu_1193_p1 = FEATURES_rect1_heigh_q0;

assign feature_rect1_width_s_fu_1189_p1 = FEATURES_rect1_width_q0;

assign feature_rect1_x_cast_fu_1182_p1 = FEATURES_rect1_x_q0;

assign feature_rect1_y_cast_fu_1186_p1 = feature_rect1_y_reg_2423;

assign feature_rect2_height_1_fu_1340_p1 = FEATURES_rect2_heigh_q0;

assign feature_rect2_width_s_fu_1336_p1 = FEATURES_rect2_width_q0;

assign feature_rect2_x_cast_fu_1329_p1 = FEATURES_rect2_x_q0;

assign feature_rect2_y_cast_fu_1333_p1 = feature_rect2_y_reg_2468;

assign feature_rect3_height_1_fu_1493_p1 = FEATURES_rect3_heigh_q0;

assign feature_rect3_width_s_fu_1489_p1 = FEATURES_rect3_width_q0;

assign feature_rect3_x_cast_fu_1485_p1 = FEATURES_rect3_x_q0;

assign feature_rect3_y_cast_fu_1468_p1 = FEATURES_rect3_y_q0;

assign grp_fu_701_p0 = (tmp_9_i_fu_978_p2 - tmp_10_i_reg_2304);

assign grp_fu_709_p2 = (integral_image_q0 + integral_image_q1);

assign grp_fu_750_p2 = (reg_746 - integral_image_q0);

assign grp_fu_756_p2 = (grp_fu_750_p2 - integral_image_q1);

assign isNeg_2_fu_1721_p3 = sh_assign_5_fu_1715_p2[ap_const_lv32_8];

assign isNeg_fu_1028_p3 = sh_assign_fu_1022_p2[ap_const_lv32_B];

assign loc_V_4_fu_1004_p1 = p_Val2_s_fu_990_p1[51:0];

assign loc_V_6_fu_1697_p1 = p_Val2_11_fu_1683_p1[22:0];

assign mean_fu_947_p2 = (tmp_5_i_fu_942_p2 - integral_image_q1);

assign p_Result_8_fu_1701_p3 = {{1'b1}, {loc_V_6_reg_2686}};

assign p_Result_s_fu_1008_p3 = {{1'b1}, {loc_V_4_reg_2325}};

assign p_Val2_11_fu_1683_p1 = grp_fu_687_p2;

assign p_Val2_s_fu_990_p1 = grp_fu_704_p2;

assign p_shl10_cast_fu_1376_p1 = tmp_66_fu_1368_p3;

assign p_shl11_cast_fu_1388_p1 = tmp_67_fu_1380_p3;

assign p_shl12_cast_fu_1282_p1 = tmp_60_fu_1274_p3;

assign p_shl13_cast_fu_1294_p1 = tmp_61_fu_1286_p3;

assign p_shl14_cast_fu_1229_p1 = tmp_53_fu_1221_p3;

assign p_shl15_cast_fu_1241_p1 = tmp_56_fu_1233_p3;

assign p_shl1_cast_fu_790_p3 = {{tmp_46_fu_786_p1}, {ap_const_lv5_0}};

assign p_shl2_cast_fu_832_p1 = tmp_31_fu_824_p3;

assign p_shl3_cast_fu_844_p1 = tmp_32_fu_836_p3;

assign p_shl4_cast_fu_1574_p1 = tmp_81_fu_1566_p3;

assign p_shl5_cast_fu_1586_p1 = tmp_82_fu_1578_p3;

assign p_shl6_cast_fu_1523_p1 = tmp_76_fu_1516_p3;

assign p_shl7_cast_fu_1534_p1 = tmp_77_fu_1527_p3;

assign p_shl8_cast_fu_1429_p1 = tmp_71_fu_1421_p3;

assign p_shl9_cast_fu_1441_p1 = tmp_72_fu_1433_p3;

assign p_shl_cast_fu_778_p3 = {{tmp_45_fu_774_p1}, {ap_const_lv7_0}};

assign result_V_2_fu_1792_p3 = ((isNeg_2_fu_1721_p3[0:0] === 1'b1) ? tmp_40_fu_1778_p1 : tmp_41_fu_1782_p4);

assign result_V_fu_1099_p3 = ((isNeg_fu_1028_p3[0:0] === 1'b1) ? tmp_38_fu_1085_p1 : tmp_39_fu_1089_p4);

assign row_fu_813_p2 = (ap_const_lv32_1 + start_row_assign_reg_598);

assign s_1_fu_1119_p2 = (s_reg_646 + ap_const_lv5_1);

assign s_cast_fu_1107_p1 = s_reg_646;

assign sh_assign_4_cast_fu_1053_p1 = $signed(sh_assign_4_fu_1045_p3);

assign sh_assign_4_fu_1045_p3 = ((isNeg_fu_1028_p3[0:0] === 1'b1) ? tmp_i_i_i_cast_fu_1041_p1 : sh_assign_fu_1022_p2);

assign sh_assign_5_fu_1715_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i1_cast5_fu_1712_p1));

assign sh_assign_6_cast_cas_fu_1750_p1 = $signed(sh_assign_6_fu_1738_p3);

assign sh_assign_6_cast_fu_1746_p1 = $signed(sh_assign_6_fu_1738_p3);

assign sh_assign_6_fu_1738_p3 = ((isNeg_2_fu_1721_p3[0:0] === 1'b1) ? tmp_4_i_i_cast_fu_1734_p1 : sh_assign_5_fu_1715_p2);

assign sh_assign_fu_1022_p2 = ($signed(ap_const_lv12_C01) + $signed(tmp_i_i_i_i_cast7_fu_1019_p1));

assign stage_accum_1_fu_1677_p2 = ($signed(stage_accum_reg_667) + $signed(feature_below_2_cast_fu_1673_p1));

assign stage_accum_cast_cas_fu_1167_p1 = $signed(stage_accum_reg_667);

assign stage_feature_count_s_fu_1137_p1 = STAGES_feature_count_q0;

assign stage_threshold_cast_fu_1141_p1 = $signed(STAGES_threshold_q0);

assign sum_i1_fu_1268_p2 = (tmp_15_i_fu_1216_p2 + feature_rect1_height_1_fu_1193_p1);

assign sum_i2_fu_1415_p2 = (tmp_15_i1_fu_1363_p2 + feature_rect2_height_1_fu_1340_p1);

assign sum_i3_fu_1561_p2 = (tmp_15_i2_reg_2548 + feature_rect3_height_1_fu_1493_p1);

assign sum_i_fu_819_p2 = (tmp_47_reg_2194 + ap_const_lv8_18);

assign thresh_fu_1633_p1 = feature_threshold_reg_2645;

assign thresh_fu_1633_p2 = ($signed(result_V_reg_2330) * $signed(thresh_fu_1633_p1));

assign tmp1_fu_1653_p2 = (val3_reg_2670 + val1_reg_2660);

assign tmp_11_fu_1113_p2 = ((s_reg_646 < ap_const_lv5_19) ? 1'b1 : 1'b0);

assign tmp_15_fu_2144_p2 = ((alr_found_i == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_15_i1_fu_1363_p2 = (tmp_47_reg_2194 + feature_rect2_y_cast_fu_1333_p1);

assign tmp_15_i2_fu_1480_p2 = (tmp_47_reg_2194 + feature_rect3_y_cast_fu_1468_p1);

assign tmp_15_i_fu_1216_p2 = (tmp_47_reg_2194 + feature_rect1_y_cast_fu_1186_p1);

assign tmp_16_fu_2154_p2 = (($signed(total_stage_accum_ca_fu_1935_p1) > $signed(best_accum)) ? 1'b1 : 1'b0);

assign tmp_17_fu_1171_p2 = (($signed(stage_accum_reg_667) < $signed(stage_threshold_cast_reg_2365)) ? 1'b1 : 1'b0);

assign tmp_18_fu_1662_p2 = (($signed(total_val_fu_1657_p2) < $signed(thresh_reg_2655)) ? 1'b1 : 1'b0);

assign tmp_19_fu_1161_p2 = (feature_index_1_reg_657 + ap_const_lv13_1);

assign tmp_1_i_i_i_cast_fu_1061_p1 = $unsigned(sh_assign_4_cast_fu_1053_p1);

assign tmp_1_i_i_i_fu_1057_p1 = $unsigned(sh_assign_4_cast_fu_1053_p1);

assign tmp_2_i_i_fu_1708_p1 = p_Result_8_fu_1701_p3;

assign tmp_2_i_i_i_fu_1065_p2 = p_Result_s_fu_1008_p3 >> tmp_1_i_i_i_cast_fu_1061_p1;

assign tmp_30_fu_798_p2 = (p_shl1_cast_fu_790_p3 + p_shl_cast_fu_778_p3);

assign tmp_31_fu_824_p3 = {{sum_i_fu_819_p2}, {ap_const_lv7_0}};

assign tmp_32_fu_836_p3 = {{sum_i_fu_819_p2}, {ap_const_lv5_0}};

assign tmp_33_fu_848_p2 = (p_shl3_cast_fu_844_p1 + p_shl2_cast_fu_832_p1);

assign tmp_34_fu_862_p2 = (tmp_30_reg_2188 + tmp_50_fu_858_p1);

assign tmp_35_fu_873_p2 = (tmp_33_reg_2210 + tmp_50_fu_858_p1);

assign tmp_36_fu_909_p2 = (tmp_i_cast_cast_fu_905_p1 + tmp_33_reg_2210);

assign tmp_37_fu_920_p2 = (tmp_i_cast_cast_fu_905_p1 + tmp_30_reg_2188);

assign tmp_38_fu_1085_p1 = tmp_62_fu_1077_p3;

assign tmp_39_fu_1089_p4 = {{tmp_3_i_i_i_fu_1071_p2[ap_const_lv32_53 : ap_const_lv32_34]}};

assign tmp_3_i_i_i_fu_1071_p2 = tmp_i_i_i_fu_1015_p1 << tmp_1_i_i_i_fu_1057_p1;

assign tmp_40_fu_1778_p1 = tmp_97_fu_1770_p3;

assign tmp_41_cast_fu_867_p1 = tmp_34_fu_862_p2;

assign tmp_41_fu_1782_p4 = {{tmp_9_i_i_fu_1764_p2[ap_const_lv32_36 : ap_const_lv32_17]}};

assign tmp_42_cast_fu_878_p1 = tmp_35_fu_873_p2;

assign tmp_43_cast_fu_914_p1 = tmp_36_fu_909_p2;

assign tmp_44_cast_fu_925_p1 = tmp_37_reg_2262;

assign tmp_45_fu_774_p1 = start_row_assign_reg_598[8:0];

assign tmp_46_fu_786_p1 = start_row_assign_reg_598[10:0];

assign tmp_47_fu_804_p1 = start_row_assign_reg_598[7:0];

assign tmp_4_i_i_cast_fu_1734_p1 = $signed(tmp_4_i_i_fu_1729_p2);

assign tmp_4_i_i_fu_1729_p2 = (ap_const_lv8_7F - loc_V_5_reg_2680);

assign tmp_50_fu_858_p1 = start_col_assign_reg_610[15:0];

assign tmp_51_fu_884_p1 = start_col_assign_reg_610[8:0];

assign tmp_53_fu_1221_p3 = {{tmp_15_i_fu_1216_p2}, {ap_const_lv7_0}};

assign tmp_54_fu_968_p2 = tmp_8_i_reg_2298 << ap_const_lv32_9;

assign tmp_55_fu_973_p2 = tmp_8_i_reg_2298 << ap_const_lv32_6;

assign tmp_56_fu_1233_p3 = {{tmp_15_i_fu_1216_p2}, {ap_const_lv5_0}};

assign tmp_57_fu_1245_p2 = (p_shl15_cast_fu_1241_p1 + p_shl14_cast_fu_1229_p1);

assign tmp_58_fu_1251_p2 = (tmp_57_fu_1245_p2 + tmp_i1_cast_cast_fu_1202_p1);

assign tmp_59_fu_1262_p2 = (tmp_57_fu_1245_p2 + tmp_i1_cast_cast_20_fu_1212_p1);

assign tmp_5_i_fu_942_p2 = (tmp_i_16_reg_2282 - integral_image_q0);

assign tmp_60_fu_1274_p3 = {{sum_i1_fu_1268_p2}, {ap_const_lv7_0}};

assign tmp_61_fu_1286_p3 = {{sum_i1_fu_1268_p2}, {ap_const_lv5_0}};

assign tmp_62_fu_1077_p3 = tmp_2_i_i_i_fu_1065_p2[ap_const_lv32_34];

assign tmp_63_fu_1298_p2 = (p_shl13_cast_fu_1294_p1 + p_shl12_cast_fu_1282_p1);

assign tmp_64_fu_1304_p2 = (tmp_63_fu_1298_p2 + tmp_i1_cast_cast_20_fu_1212_p1);

assign tmp_65_fu_1315_p2 = (tmp_63_fu_1298_p2 + tmp_i1_cast_cast_fu_1202_p1);

assign tmp_66_fu_1368_p3 = {{tmp_15_i1_fu_1363_p2}, {ap_const_lv7_0}};

assign tmp_67_fu_1380_p3 = {{tmp_15_i1_fu_1363_p2}, {ap_const_lv5_0}};

assign tmp_68_fu_1392_p2 = (p_shl11_cast_fu_1388_p1 + p_shl10_cast_fu_1376_p1);

assign tmp_69_fu_1398_p2 = (tmp_68_fu_1392_p2 + tmp_i2_cast_cast_fu_1349_p1);

assign tmp_6_i_fu_936_p2 = (integral_image_sq_q1 + integral_image_sq_q0);

assign tmp_6_i_i_fu_1754_p1 = $unsigned(sh_assign_6_cast_fu_1746_p1);

assign tmp_70_cast_fu_1257_p1 = tmp_58_fu_1251_p2;

assign tmp_70_fu_1409_p2 = (tmp_68_fu_1392_p2 + tmp_i2_cast_cast_22_fu_1359_p1);

assign tmp_71_cast_fu_1321_p1 = tmp_59_reg_2448;

assign tmp_71_fu_1421_p3 = {{sum_i2_fu_1415_p2}, {ap_const_lv7_0}};

assign tmp_72_fu_1433_p3 = {{sum_i2_fu_1415_p2}, {ap_const_lv5_0}};

assign tmp_73_fu_1445_p2 = (p_shl9_cast_fu_1441_p1 + p_shl8_cast_fu_1429_p1);

assign tmp_74_fu_1451_p2 = (tmp_73_fu_1445_p2 + tmp_i2_cast_cast_22_fu_1359_p1);

assign tmp_75_cast_fu_1310_p1 = tmp_64_fu_1304_p2;

assign tmp_75_fu_1462_p2 = (tmp_73_fu_1445_p2 + tmp_i2_cast_cast_fu_1349_p1);

assign tmp_76_cast_fu_1325_p1 = tmp_65_reg_2458;

assign tmp_76_fu_1516_p3 = {{tmp_15_i2_reg_2548}, {ap_const_lv7_0}};

assign tmp_77_fu_1527_p3 = {{tmp_15_i2_reg_2548}, {ap_const_lv5_0}};

assign tmp_78_fu_1538_p2 = (p_shl7_cast_fu_1534_p1 + p_shl6_cast_fu_1523_p1);

assign tmp_79_fu_1544_p2 = (tmp_78_fu_1538_p2 + tmp_i3_cast_cast_fu_1502_p1);

assign tmp_7_i_fu_953_p2 = (tmp_6_i_reg_2287 - integral_image_sq_q0);

assign tmp_7_i_i_fu_1758_p2 = p_Result_8_fu_1701_p3 >> sh_assign_6_cast_cas_fu_1750_p1;

assign tmp_80_cast_fu_1404_p1 = tmp_69_fu_1398_p2;

assign tmp_80_fu_1555_p2 = (tmp_78_fu_1538_p2 + tmp_i3_cast_cast_24_fu_1512_p1);

assign tmp_81_cast_fu_1472_p1 = tmp_70_reg_2508;

assign tmp_81_fu_1566_p3 = {{sum_i3_fu_1561_p2}, {ap_const_lv7_0}};

assign tmp_82_fu_1578_p3 = {{sum_i3_fu_1561_p2}, {ap_const_lv5_0}};

assign tmp_83_fu_1590_p2 = (p_shl5_cast_fu_1586_p1 + p_shl4_cast_fu_1574_p1);

assign tmp_84_fu_1596_p2 = (tmp_83_fu_1590_p2 + tmp_i3_cast_cast_24_fu_1512_p1);

assign tmp_85_cast_fu_1457_p1 = tmp_74_fu_1451_p2;

assign tmp_85_fu_1607_p2 = (tmp_83_fu_1590_p2 + tmp_i3_cast_cast_fu_1502_p1);

assign tmp_86_cast_fu_1476_p1 = tmp_75_reg_2518;

assign tmp_8_i_fu_958_p2 = (tmp_7_i_fu_953_p2 - integral_image_sq_q1);

assign tmp_90_cast_fu_1550_p1 = tmp_79_fu_1544_p2;

assign tmp_91_cast_fu_1613_p1 = tmp_80_reg_2565;

assign tmp_95_cast_fu_1602_p1 = tmp_84_fu_1596_p2;

assign tmp_96_cast_fu_1617_p1 = tmp_85_reg_2575;

assign tmp_97_fu_1770_p3 = tmp_7_i_i_fu_1758_p2[ap_const_lv32_17];

assign tmp_9_i_fu_978_p2 = (tmp_55_fu_973_p2 + tmp_54_fu_968_p2);

assign tmp_9_i_i_fu_1764_p2 = tmp_2_i_i_fu_1708_p1 << tmp_6_i_i_fu_1754_p1;

assign tmp_fu_762_p2 = ($signed(width) + $signed(ap_const_lv32_FFFFFFE8));

assign tmp_i1_19_fu_1206_p2 = (tmp_i1_fu_1197_p2 + feature_rect1_width_s_fu_1189_p1);

assign tmp_i1_cast_cast_20_fu_1212_p1 = tmp_i1_19_fu_1206_p2;

assign tmp_i1_cast_cast_fu_1202_p1 = tmp_i1_fu_1197_p2;

assign tmp_i1_fu_1197_p2 = (tmp_51_reg_2242 + feature_rect1_x_cast_fu_1182_p1);

assign tmp_i2_21_fu_1353_p2 = (tmp_i2_fu_1344_p2 + feature_rect2_width_s_fu_1336_p1);

assign tmp_i2_cast_cast_22_fu_1359_p1 = tmp_i2_21_fu_1353_p2;

assign tmp_i2_cast_cast_fu_1349_p1 = tmp_i2_fu_1344_p2;

assign tmp_i2_fu_1344_p2 = (tmp_51_reg_2242 + feature_rect2_x_cast_fu_1329_p1);

assign tmp_i3_23_fu_1506_p2 = (tmp_i3_fu_1497_p2 + feature_rect3_width_s_fu_1489_p1);

assign tmp_i3_cast_cast_24_fu_1512_p1 = tmp_i3_23_fu_1506_p2;

assign tmp_i3_cast_cast_fu_1502_p1 = tmp_i3_fu_1497_p2;

assign tmp_i3_fu_1497_p2 = (tmp_51_reg_2242 + feature_rect3_x_cast_fu_1485_p1);

assign tmp_i_16_fu_930_p2 = (integral_image_q1 + integral_image_q0);

assign tmp_i_cast_cast_fu_905_p1 = tmp_i_fu_899_p2;

assign tmp_i_fu_899_p2 = (ap_const_lv9_18 + tmp_51_fu_884_p1);

assign tmp_i_i_i1_cast5_fu_1712_p1 = loc_V_5_reg_2680;

assign tmp_i_i_i_17_fu_1036_p2 = (ap_const_lv11_3FF - loc_V_reg_2319);

assign tmp_i_i_i_cast_fu_1041_p1 = $signed(tmp_i_i_i_17_fu_1036_p2);

assign tmp_i_i_i_fu_1015_p1 = p_Result_s_fu_1008_p3;

assign tmp_i_i_i_i_cast7_fu_1019_p1 = loc_V_reg_2319;

assign tmp_s_fu_768_p2 = ($signed(height) + $signed(ap_const_lv32_FFFFFFE8));

assign total_stage_accum_1_fu_1176_p2 = ($signed(stage_accum_cast_cas_fu_1167_p1) + $signed(total_stage_accum_reg_634));

assign total_stage_accum_ca_fu_1935_p1 = $signed(total_stage_accum_reg_634);

assign total_val_fu_1657_p2 = (val2_reg_2665 + tmp1_fu_1653_p2);

assign val1_fu_1638_p1 = feature_rect1_weight_reg_2620;

assign val1_fu_1638_p2 = ($signed(tmp_18_i_reg_2498) * $signed(val1_fu_1638_p1));

assign val2_fu_1643_p1 = val2_fu_1643_p10;

assign val2_fu_1643_p10 = feature_rect2_weight_reg_2625;

assign val2_fu_1643_p2 = ($signed(tmp_18_i1_reg_2555) * $signed({{1'b0}, {val2_fu_1643_p1}}));

assign val3_fu_1648_p1 = val3_fu_1648_p10;

assign val3_fu_1648_p10 = feature_rect3_weight_reg_2630;

assign val3_fu_1648_p2 = ($signed(tmp_18_i2_reg_2650) * $signed({{1'b0}, {val3_fu_1648_p1}}));

always @ (posedge ap_clk) begin
    tmp_30_reg_2188[4:0] <= 5'b00000;
    tmp_33_reg_2210[4:0] <= 5'b00000;
    feature_index_1_cast_reg_2376[31:13] <= 19'b0000000000000000000;
end

endmodule //cascade_classifier
